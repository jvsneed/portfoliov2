---
const currentPath = Astro.url.pathname;
const links = [
    { path: '/', label: 'Home' },
    { path: '/portfolio', label: 'Portfolio' },
    { path: '/writing', label: 'Writing' },
    { path: '/about', label: 'About' }  // Added back the About link
];
---

<header>
    <div class="header-container">
        <nav>
            <a href="/" class="logo">
                <div class="logo-wrapper">
                    <span class="logo-short">js</span>
                    <span class="logo-full">johanna sneed</span>
                    <span class="logo-dot"></span>
                </div>
            </a>
            <button 
                type="button" 
                class="menu-button" 
                aria-expanded="false"
                aria-controls="nav-menu"
            >
                Menu
            </button>
            <ul class="nav-links" id="nav-menu">
                {links.map(({ path, label }) => (
                    <li>
                        <a 
                            href={path} 
                            class:list={['nav-link', { active: currentPath === path }]}
                        >
                            {label}
                        </a>
                    </li>
                ))}
            </ul>
        </nav>
    </div>
    <div class="cursor-text"></div>
</header>

<style>
    header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        width: 100%;
        height: 3rem;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
        z-index: 100;
    }

    .header-container {
        max-width: var(--max-width);
        margin: 0 auto;
        padding: 0 var(--space-xl);
        height: 100%;
    }

    nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        height: 100%;
    }

    .logo {
        position: relative;
        font-family: var(--font-special);
        font-size: 1.5rem;
        text-decoration: none;
        color: var(--color-fg);
        overflow: visible;
    }

    .logo-wrapper {
        position: relative;
        display: inline-block;
        padding: 0.25em 0;
        will-change: transform;
    }

    .logo-short,
    .logo-full {
        display: block;
        will-change: transform, opacity;
    }

    .logo-short {
        transform: translateY(0);
        opacity: 1;
        transition: all 0.4s var(--ease-out-spring);
    }

    .logo-full {
        position: absolute;
        left: 0;
        top: 0.25em;
        transform: translateY(-100%); /* Changed from 100% to -100% */
        opacity: 0;
        transition: all 0.4s var(--ease-out-spring);
        white-space: nowrap;
    }

    .logo-dot {
        position: absolute;
        width: 4px;
        height: 4px;
        background: var(--color-accent);
        border-radius: 50%;
        right: -10px;
        top: 60%;
        transform: translateY(-90%);
        transition: transform 0.4s var(--ease-out-spring);
        will-change: transform;
    }

    .logo:hover .logo-short {
        transform: translateY(150%); /* Changed from -150% to 150% */
        opacity: 0;
    }

    .logo:hover .logo-full {
        transform: translateY(0);
        opacity: 1;
    }

    .logo:hover .logo-dot {
        transform: translate(140px, -100%);
    }

    .nav-links {
        display: flex;
        gap: var(--space-lg);
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .nav-link {
        color: var(--color-muted);
        font-weight: 500;
        position: relative;
        padding: 0.5em 0;
        text-decoration: none; /* Add this line */
        cursor: none;
    }

    /* Remove or modify these hover/active states */
    .nav-link::after {
        display: none; /* Remove underline effect */
    }

    .nav-link:hover {
        color: var(--color-fg);
    }

    .nav-link.active {
        color: var(--color-accent);
    }

    .active::after {
        display: none; /* Remove active underline */
    }

    .menu-button {
        display: none;
        background: none;
        border: none;
        padding: 0.75rem;
        font-family: var(--font-sans);
        font-size: 0.875rem;
        color: var(--color-fg);
        cursor: pointer;
    }

    @media (max-width: 768px) {
        .header-container {
            padding: 0 var(--space-sm);
        }

        .menu-button {
            display: block;
            position: relative;
            z-index: 1001;
        }

        .menu-button.active {
            color: var(--color-accent);
        }

        .nav-links {
            position: fixed;
            inset: 0;
            top: 3rem;
            background: var(--color-bg);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: var(--space-lg);
            padding: var(--space-xl);
            transform: translateY(-100%);
            opacity: 0;
            pointer-events: none;
            transition: all 0.4s var(--ease-out-spring);
            z-index: 1000;
        }

        .nav-links.active {
            transform: translateY(0);
            opacity: 1;
            pointer-events: all;
        }

        .nav-link {
            font-size: 2rem;
            font-family: var(--font-special);
            opacity: 0;
            transform: translateY(20px);
            transition: transform 0.3s var(--ease-out-spring),
                      opacity 0.3s var(--ease-out-spring);
        }

        .nav-links.active .nav-link {
            opacity: 1;
            transform: translateY(0);
            transition-delay: calc(var(--index) * 0.1s + 0.2s);
        }
    }

    .menu-toggle {
        display: none;
    }

    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        border: 0;
    }

    /* Custom cursor text styles */
    .cursor-text {
        position: fixed;
        pointer-events: none;
        width: 60px;  /* Smaller size for header */
        height: 60px;
        background: var(--color-accent);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: var(--font-mono);
        font-size: 1rem; /* Slightly smaller text */
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.5);
        transition: opacity 0.3s, transform 0.3s var(--ease-out-spring);
        z-index: 1000;
    }
</style>

<script>
    const menuButton = document.querySelector('.menu-button') as HTMLButtonElement;
    const navLinks = document.querySelector('.nav-links') as HTMLElement;
    const navLinkElements = document.querySelectorAll('.nav-link');
    const cursorText = document.querySelector('.cursor-text') as HTMLElement;
    const links = document.querySelectorAll('.nav-link');

    menuButton?.addEventListener('click', () => {
        const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
        menuButton.setAttribute('aria-expanded', (!isExpanded).toString());
        menuButton.classList.toggle('active');
        navLinks?.classList.toggle('active');
        document.body.classList.toggle('menu-open');
    });

    // Add index for staggered animation
    navLinkElements.forEach((link, index) => {
        (link as HTMLElement).style.setProperty('--index', index.toString());
    });

    // Close menu when clicking links
    navLinkElements.forEach(link => {
        link.addEventListener('click', () => {
            menuButton.classList.remove('active');
            navLinks.classList.remove('active');
            document.body.classList.remove('menu-open');
        });
    });

    // Close menu on resize if open
    window.addEventListener('resize', () => {
        if (window.innerWidth > 768 && navLinks?.classList.contains('active')) {
            menuButton.classList.remove('active');
            navLinks.classList.remove('active');
            document.body.classList.remove('menu-open');
        }
    });

    document.addEventListener('mousemove', (e) => {
        if (cursorText) {
            cursorText.style.left = e.clientX + 'px';
            cursorText.style.top = e.clientY + 'px';
        }
    });

    links.forEach(link => {
        link.addEventListener('mouseenter', () => {
            if (cursorText) {
                cursorText.textContent = link.textContent;
                cursorText.style.opacity = '1';
                cursorText.style.transform = 'translate(-50%, -50%) scale(1)';
            }
        });

        link.addEventListener('mouseleave', () => {
            if (cursorText) {
                cursorText.style.opacity = '0';
                cursorText.style.transform = 'translate(-50%, -50%) scale(0.5)';
            }
        });
    });
</script>
