---

function normalizePath(path: string) {
    return path === '/' ? '/' : path.replace(/\/?$/, '/');
}

const currentPath = normalizePath(Astro.url.pathname);
const links = [
    { path: '/#portfolio', label: 'Portfolio' },
    { path: '/garden/', label: 'Digital Garden' },
    { path: '/about/', label: 'About' }
];
---

<header transition:persist role="banner">
    <div class="scroll-progress" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
    <div class="header-container">
        <nav role="navigation" aria-label="Main navigation">
            <a href="/" class="logo">
                <div class="logo-wrapper">
                    <span class="logo-short">js</span>
                    <span class="logo-full">johanna sneed</span>
                    <span class="logo-dot"></span>
                </div>
            </a>
            <div class="nav-wrapper">
                <ul class="nav-links" id="nav-menu" role="menubar">
                    {links.map(({ path, label }) => (
                        <li role="none">
                            <a 
                                href={path} 
                                class="nav-link"
                                role="menuitem"
                                data-path={path}
                                data-active={currentPath === path}
                                aria-current={currentPath === path ? 'page' : undefined}
                            >
                                {label}
                            </a>
                        </li>
                    ))}
                </ul>
            </div>
            <button 
                type="button" 
                class="menu-button" 
                aria-expanded="false"
                aria-controls="nav-menu"
                aria-label="Toggle menu"
            >
                <span class="menu-text">Menu</span>
            </button>
        </nav>
    </div>
    <div class="cursor-text" aria-hidden="true"></div>
</header>

<style>
    header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        width: 100%;
        height: 3rem;
        background: rgba(255, 255, 255, 0.85);
        -webkit-backdrop-filter: blur(10px);
        backdrop-filter: blur(10px);
        z-index: 100;
    }

    .header-container {
        max-width: var(--max-width);
        margin: 0 auto;
        padding: 0 var(--space-xl);
        height: 100%;
    }

    nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        height: 100%;
    }

    .logo {
        position: relative;
        font-family: var(--font-special);
        font-size: 1.5rem;
        text-decoration: none;
        color: var(--color-fg);
        overflow: visible;
    }

    .logo-wrapper {
        position: relative;
        display: inline-block;
        padding: 0.25em 0;
        will-change: transform;

    }

    .logo-short,
    .logo-full {
        display: block;
        will-change: transform, opacity;
    }

    .logo-short {
        transform: translateY(0);
        opacity: 1;
        transition: all 0.4s var(--ease-out-spring);
    }

    .logo-full {
        position: absolute;
        left: 0;
        top: 0.25em;
        transform: translateY(-100%); /* Changed from 100% to -100% */
        opacity: 0;
        transition: all 0.4s var(--ease-out-spring);
        white-space: nowrap;
    }

    .logo-dot {
        position: absolute;
        width: 4px;
        height: 4px;
        background: var(--color-accent);
        border-radius: 50%;
        right: -10px;
        top: 60%;
        transform: translateY(-90%);
        transition: transform 0.4s var(--ease-out-spring);
        will-change: transform;
    }

    .logo:hover .logo-short {
        transform: translateY(150%); /* Changed from -150% to 150% */
        opacity: 0;
    }

    .logo:hover .logo-full {
        transform: translateY(0);
        opacity: 1;
    }

    .logo:hover .logo-dot {
        transform: translate(140px, -100%);
    }

    .nav-wrapper {
        display: flex;
        align-items: center;
        gap: var(--space-md);
    }

    .nav-links {
        display: flex;
        gap: var(--space-lg);
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .nav-link {
        color: var(--color-muted);
        font-weight: 500;
        position: relative;
        padding: 0.5em 0;
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .nav-link:hover,
    .nav-link:focus-visible {
        color: var(--color-fg);
        outline: none;
    }

    .nav-link[data-active="true"] {
        color: var(--color-accent);
        border-top: 3px solid var(--color-accent);
    }

    /* Keyboard focus styles */
    .nav-link:focus-visible {
        outline: 2px solid var(--color-accent);
        outline-offset: 4px;
    }

    .menu-button {
        display: none;
        background: none;
        border: none;
        padding: 0.75rem;
        font-family: var(--font-sans);
        font-size: 0.875rem;
        color: var(--color-fg);
        cursor: pointer;
    }

    @media (max-width: 768px) {
        .header-container {
            padding: 0 var(--space-sm);
        }

        .menu-button {
            display: block;
            position: relative;
            z-index: 1001;
        }

        .menu-button.active {
            color: var(--color-accent);
        }

        .nav-wrapper {
            flex-direction: column;
        }

        .nav-links {
            position: fixed;
            inset: 0;
            top: 3rem;
            background: var(--color-bg);
            /* Add these properties for solid background */
            background-color: rgb(255, 255, 255);
            -webkit-backdrop-filter: none;
            backdrop-filter: none;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: var(--space-md);
            padding: var(--space-md);
            transform: translateY(-100%);
            opacity: 0;
            pointer-events: none;
            transition: all 0.4s var(--ease-out-spring);
            z-index: 1000;
            /* Add these properties to ensure full coverage */
            min-height: calc(100vh - 3rem);
        }

        /* Add a class to prevent scrolling when menu is open */
        :global(body.menu-open) {
            overflow: hidden;
        }

        .nav-links.active {
            transform: translateY(0);
            opacity: 1;
            pointer-events: all;
        }

        .nav-link {
            font-size: 2rem;
            font-family: var(--font-special);
            opacity: 0;
            transform: translateY(20px);
            transition: transform 0.3s var(--ease-out-spring),
                      opacity 0.3s var(--ease-out-spring);
        }

        .nav-links.active .nav-link {
            opacity: 1;
            transform: translateY(0);
            transition-delay: calc(var(--index) * 0.1s + 0.2s);
        }
    }

    .menu-toggle {
        display: none;
    }

    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        border: 0;
    }

    /* Custom cursor text styles */
    @media (hover: hover) and (pointer: fine) {
        .cursor-text {
            position: fixed;
            pointer-events: none;
            width: 60px;  /* Smaller size for header */
            height: 60px;
            background: var(--color-accent);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: var(--font-mono);
            font-size: 1rem; /* Slightly smaller text */
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.5);
            transition: opacity 0.3s, transform 0.3s var(--ease-out-spring);
            z-index: 1000;
        }

        .nav-link {
            /* cursor: none; */
        }
    }

    @media (hover: none) or (pointer: coarse) {
        .cursor-text {
            display: none;
        }

        .nav-link {
            cursor: pointer;
        }
    }

    .scroll-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background: var(--color-accent);
        transform: scaleX(0);
        transform-origin: left;
        transition: transform 0.1s linear;
        opacity: 0.8;
        z-index: 101;
    }
</style>

<script>
function updateActiveLinks() {
    const currentPath = window.location.pathname === '/' ? '/' : window.location.pathname.replace(/\/?$/, '/');
    document.querySelectorAll('.nav-link').forEach(link => {
        const linkPath = link.getAttribute('data-path');
        if (linkPath) {
            const isActive = currentPath === linkPath;
            link.setAttribute('data-active', isActive.toString());
            link.setAttribute('aria-current', isActive ? 'page' : 'false');
        }
    });
}

// Update active state on page load
updateActiveLinks();

// Update active state when navigation occurs
document.addEventListener('astro:page-load', updateActiveLinks);

const menuButton = document.querySelector('.menu-button') as HTMLButtonElement;
const navLinks = document.querySelector('.nav-links') as HTMLElement;
const navLinkElements = document.querySelectorAll('.nav-link');

// Add keyboard navigation
navLinks?.addEventListener('keydown', (e) => {
    const links = Array.from(navLinkElements);
    const index = links.indexOf(document.activeElement as HTMLElement);
    
    switch(e.key) {
        case 'ArrowRight':
        case 'ArrowDown':
            e.preventDefault();
            const nextIndex = (index + 1) % links.length;
            (links[nextIndex] as HTMLElement).focus();
            break;
        case 'ArrowLeft':
        case 'ArrowUp':
            e.preventDefault();
            const prevIndex = index - 1 < 0 ? links.length - 1 : index - 1;
            (links[prevIndex] as HTMLElement).focus();
            break;
    }
});

menuButton?.addEventListener('click', () => {
    const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
    menuButton.setAttribute('aria-expanded', (!isExpanded).toString());
    menuButton.classList.toggle('active');
    navLinks?.classList.toggle('active');
    document.body.classList.toggle('menu-open'); // Add this line if not already present
    
    if (!isExpanded) {
        // When opening menu, focus the first link
        setTimeout(() => {
            (navLinkElements[0] as HTMLElement).focus();
        }, 100);
    }
});

// Add index for staggered animation
navLinkElements.forEach((link, index) => {
    (link as HTMLElement).style.setProperty('--index', index.toString());
});

// Close menu when clicking links
navLinkElements.forEach(link => {
    link.addEventListener('click', () => {
        menuButton.classList.remove('active');
        navLinks.classList.remove('active');
        document.body.classList.remove('menu-open');
    });
});

// Close menu on resize if open
window.addEventListener('resize', () => {
    if (window.innerWidth > 768 && navLinks?.classList.contains('active')) {
        menuButton.classList.remove('active');
        navLinks.classList.remove('active');
        document.body.classList.remove('menu-open');
    }
});

// Only initialize cursor effects if device supports hover
if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
    document.addEventListener('mousemove', (e) => {
        const cursorText = document.querySelector('.cursor-text') as HTMLElement;
        if (cursorText) {
            cursorText.style.left = e.clientX + 'px';
            cursorText.style.top = e.clientY + 'px';
        }
    });

    const links = document.querySelectorAll('.nav-link');
    links.forEach(link => {
        link.addEventListener('mouseenter', () => {
            const cursorText = document.querySelector('.cursor-text') as HTMLElement;
            if (cursorText) {
                cursorText.textContent = link.textContent;
                cursorText.style.opacity = '1';
                cursorText.style.transform = 'translate(-50%, -50%) scale(1)';
            }
        });

        link.addEventListener('mouseleave', () => {
            const cursorText = document.querySelector('.cursor-text') as HTMLElement;
            if (cursorText) {
                cursorText.style.opacity = '0';
                cursorText.style.transform = 'translate(-50%, -50%) scale(0.5)';
            }
        });
    });
}

// Add scroll progress indicator
window.addEventListener('scroll', () => {
    const scrollPercent = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
    const progressBar = document.querySelector('.scroll-progress') as HTMLElement;
    if (progressBar) {
        progressBar.style.transform = `scaleX(${scrollPercent / 100})`;
        progressBar.setAttribute('aria-valuenow', Math.round(scrollPercent).toString());
    }
});
</script>