---
import Layout from '../layouts/Layout.astro';


// Fetch all garden note files
const gardenNotes = await Astro.glob('./garden/**/*.md');

// Add helper function for consistent tag normalization
function normalizeTag(tag: string): string {
    return tag.toLowerCase().trim();
}

// Update how we prepare tag data
const categoryCount = gardenNotes.reduce((acc, note) => {
    note.frontmatter.topics?.forEach(topic => {
        const normalizedTopic = normalizeTag(topic);
        acc[normalizedTopic] = (acc[normalizedTopic] || 0) + 1;
    });
    return acc;
}, {} as Record<string, number>);

const allCategories = [...new Set(gardenNotes.flatMap(note => 
    note.frontmatter.topics?.map(normalizeTag) || []
))].sort();

// Add safety checks for the growth stage
const sortedNotes = gardenNotes
    .sort((a, b) => {
        return new Date(b.frontmatter.lastModified).getTime() - new Date(a.frontmatter.lastModified).getTime();
    });

// Use normalized tags in data preparation
const links = gardenNotes.flatMap(note => 
    (note.frontmatter.topics || [])
        .map(topic => ({
            source: note.url,
            target: normalizeTag(topic)
        }))
);
---

<Layout>
    <div class="page-container">
        <header class="header-content">
            <h1 class="section-title">Digital Garden</h1>
            <p class="garden-intro">Unlike a blog, the Digital Garden is a growing collection of notes and thoughts that evolve over time. This is where I collect and refine thoughts, ideas, and knowledge from topics that catch my interest. The idea here is to "learn in public". 
                <a href="https://maggieappleton.com/garden-history/" target="_blank" rel="noopener">Learn more about digital gardens</a>.
            </p>
        </header>

        <div class="garden-layout">
            <aside class="garden-sidebar">
                <div class="sidebar-section">
                    <h2>Search notes</h2>
                    <input 
                        type="search" 
                        id="garden-search"
                        class="search-input" 
                        aria-label="Search notes"
                    />
                </div>

                <div class="sidebar-section">
                    <h2>Filter by tag</h2>
                    <div class="filter-tags">
                        <button class="tag active" data-category="all">
                            all tags
                            <span class="count">{gardenNotes.length}</span>
                        </button>
                        {allCategories.map(category => (
                            <button class="tag" data-category={category}>
                                {category}
                                <span class="count">{categoryCount[category]}</span>
                            </button>
                        ))}
                    </div>
                </div>
            </aside>

            <main class="garden-content">
                <div class="notes-grid">
                    {sortedNotes.map((note) => (
                        <a href={note.url} 
                           class="note-card" 
                           data-categories={note.frontmatter.topics?.map(normalizeTag).join('|')}>
                            <div class="note-header">
                                <time class="last-tended">Tended {new Date(note.frontmatter.lastModified).toLocaleDateString()}</time>
                            </div>
                            <h2>{note.frontmatter.title}</h2>
                            <p>{note.frontmatter.description}</p>
                            {/* <div class="note-topics">
                                {note.frontmatter.topics?.map(topic => (
                                    <span class="topic-tag">{topic}</span>
                                ))}
                            </div> */}
                        </a>
                    ))}
                </div>
            </main>
        </div>
        <div class="cursor-text"></div>
    </div>
</Layout>

<style>

    .garden-header {
        margin-bottom: var(--space-xl);
    }

    .garden-intro {
        color: var(--color-muted);
        max-width: 65ch;
    }

    .garden-layout {
        display: grid;
        grid-template-columns: minmax(250px, 1fr) 3fr;
        margin-top: var(--space-lg);
        gap: var(--space-xl);
        align-items: start;
    }


    .garden-sidebar {
        position: sticky;
        top: 5rem;
    }

    .sidebar-section {
        margin-bottom: var(--space-lg);
    }

    .sidebar-section h2 {
        font-size: 0.875rem;
        font-family: var(--font-mono);
        color: var(--color-muted);
        margin-bottom: var(--space-sm);
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem;
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-fg);
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        transition: all 0.3s var(--ease-out-spring);
    }

    .search-input:focus {
        outline: none;
        border-color: var(--color-accent);
        box-shadow: 0 0 0 3px rgba(255, 68, 68, 0.1);
    }

    .filter-tags {
        display: flex;
        flex-direction: column;
        gap: var(--space-xs);
    }

    .garden-filters {
        margin: var(--space-sm) 0;
        padding: var(--space-md);
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
    }

    .search-section {
        margin-bottom: var(--space-md);
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem;
        font-family: var(--font-mono);
        font-size: 1rem;
        color: var(--color-fg);
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        transition: all 0.3s var(--ease-out-spring);
    }

    .search-input:focus {
        outline: none;
        border-color: var(--color-accent);
        box-shadow: 0 0 0 3px color-mix(in srgb, var(--color-accent) 25%, transparent);
    }

    .search-input::placeholder {
        color: var(--color-muted);
    }

    .filter-section h2 {
        font-size: 0.875rem;
        font-family: var (--font-mono);
        color: var(--color-muted);
        margin-bottom: var(--space-sm);
    }

    .category-tags {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-xs);
    }

    .tag {
        display: flex;
        align-items: center;
        text-align:start;
        gap: 0.5rem;
        font-family: var(--font-mono);
        font-size: 1rem;
        color: var(--color-muted);
        padding: 1rem 1rem;
        border: 1px solid var(--color-border);
        border-radius: 2px;
        background: var(--color-surface);
        cursor: pointer;
        transition: all 0.3s var(--ease-out-spring);
    }

    .tag:hover, .tag.active {
        background: var(--color-accent);
        color: white;
        border-color: var(--color-accent);
    }

    .count {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 1.5rem;
        height: 1.5rem;
        padding: 0 0.5rem;
        border-radius: 12px;
        background: var(--color-border);
        color: var(--color-muted);
        font-size: 0.75rem;
    }

    .tag:hover .count,
    .tag.active .count {
        background: rgba(255, 255, 255, 0.2);
        color: white;
    }

    .notes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: var(--space-sm);
    }

    .note-card {
        display: block;
        text-decoration: none;
        color: inherit;
        padding: var(--space-lg);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        background: rgba(255, 255, 255, 0.8);
        transition: all 0.3s var(--ease-out-spring);
        cursor: none;
        transform-style: preserve-3d;
        perspective: 1000px;
    }

    .note-card:hover {
        border-color: var(--color-accent);
        transform: translateX(1rem) translateZ(20px) rotateX(2deg) rotateY(-2deg);
    }

    .read-more {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: var(--space-md);
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
        opacity: 0;
        transform: translateX(-10px);
        transition: all 0.3s var(--ease-out-spring);
    }

    .note-card:hover .read-more {
        opacity: 1;
        transform: translateX(0);
    }

    .read-more .arrow {
        transition: transform 0.3s var(--ease-out-spring);
    }

    .read-more:hover .arrow {
        transform: translateX(6px);
    }

    .note-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-sm);
    }

    .last-tended {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-muted);
    }

    .note-card h2 {
        font-size: 1.5rem;
        margin: var(--space-sm) 0;
        line-height: 1.2;
    }

    .note-card p {
        color: var(--color-muted);
        margin-bottom: var(--space-md);
        line-height: 1.5;
    }

    .note-topics {
        display: flex;
        flex-wrap: wrap;
        gap: var (--space-xs);
    }

    .topic-tag {
        font-family: var (--font-mono);
        font-size: 0.75rem;
        padding: 0.25em 0.75em;
        background: var(--color-surface);
        border: 1px solid var (--color-border);
        border-radius: 2px;
        color: var(--color-muted);
    }

    .note-card.hidden {
        display: none;
    }

    .cursor-text {
        position: fixed;
        pointer-events: none;
        width: 120px;
        height: 120px;
        background: var(--color-accent);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: var(--font-mono);
        font-size: 0.875rem;
        text-align: center;
        padding: 1.5rem;
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.5);
        transition: opacity 0.3s, transform 0.3s var(--ease-out-spring);
        z-index: 1000;
    }

    @media (hover: hover) and (pointer: fine) {
        .note-card {
            cursor: none;
        }
        
        .cursor-text {
            // ...existing cursor-text styles...
        }
    }

    @media (hover: none) or (pointer: coarse) {
        .cursor-text {
            display: none;
        }

        .note-card {
            cursor: pointer;
        }
    }

    @media (max-width: 768px) {
        .garden-layout {
            grid-template-columns: 1fr;
        }

        .garden-sidebar {
            position: relative;
            top: 0;
            padding: var(--space-md);
            background: var(--color-surface);
            border: 1px solid var(--color-border);
            border-radius: var(--curve-sm);
            margin-bottom: var(--space-lg);
        }

        .filter-tags {
            flex-direction: row;
            flex-wrap: wrap;
        }

        .garden-container {
            padding: var(--space-xl) var(--space-md);
        }

        .category-tags {
            overflow-x: auto;
            padding-bottom: var(--space-sm);
            -webkit-overflow-scrolling: touch;
            scrollbar-width: none;
            white-space: nowrap;
        }

        .notes-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    interface NoteElement extends HTMLElement {
        style: CSSStyleDeclaration;
    }

    const filterButtons = document.querySelectorAll<HTMLButtonElement>('.tag');
    const noteCards = document.querySelectorAll<NoteElement>('.note-card');

    function filterNotes(category: string) {
        const normalizedCategory = category.toLowerCase().trim();
        
        // Update button states
        filterButtons.forEach(btn => {
            btn.classList.remove('active');
            if (normalizeTag(btn.dataset.category || '') === normalizedCategory) {
                btn.classList.add('active');
            }
        });

        // Filter notes
        noteCards.forEach(card => {
            if (category === 'all') {
                card.style.display = '';
                return;
            }

            const categories = (card.dataset.categories || '').split('|');
            const hasCategory = categories.some(cat => 
                normalizeTag(cat) === normalizedCategory
            );
            
            card.style.display = hasCategory ? '' : 'none';
        });
    }

    // Helper function for consistent tag normalization
    function normalizeTag(tag: string): string {
        return tag.toLowerCase().trim();
    }

    // Set up filter button click handlers
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            const category = button.dataset.category || 'all';
            filterNotes(category);
        });
    });

    // Handle initial filter if one is set in session storage
    document.addEventListener('DOMContentLoaded', () => {
        const selectedCategory = sessionStorage.getItem('selectedCategory');
        if (selectedCategory) {
            filterNotes(selectedCategory);
            sessionStorage.removeItem('selectedCategory');
        }
    });

    // Add search functionality
    const searchInput = document.getElementById('garden-search') as HTMLInputElement;
    const notes = document.querySelectorAll<HTMLElement>('.note-card');

    searchInput?.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
        
        notes.forEach(note => {
            const title = note.querySelector('h2')?.textContent?.toLowerCase() || '';
            const description = note.querySelector('p')?.textContent?.toLowerCase() || '';
            const topics = note.getAttribute('data-topics')?.toLowerCase() || '';
            
            const matches = title.includes(searchTerm) || 
                          description.includes(searchTerm) || 
                          topics.includes(searchTerm);

            note.style.display = matches ? '' : 'none';
        });
    });

    // Only initialize cursor effects if device supports hover
    if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
        // Add cursor effect
        const cursorText = document.querySelector<HTMLDivElement>('.cursor-text');

        document.addEventListener('mousemove', (e) => {
            if (cursorText) {
                cursorText.style.left = `${e.clientX}px`;
                cursorText.style.top = `${e.clientY}px`;
            }
        });

        noteCards.forEach(card => {
            card.addEventListener('mouseenter', () => {
                if (cursorText) {
                    cursorText.textContent = 'Open note';
                    cursorText.style.opacity = '1';
                    cursorText.style.transform = 'translate(-50%, -50%) scale(1)';
                }
            });

            card.addEventListener('mouseleave', () => {
                if (cursorText) {
                    cursorText.style.opacity = '0';
                    cursorText.style.transform = 'translate(-50%, -50%) scale(0.5)';
                }
            });
        });
    }
</script>
