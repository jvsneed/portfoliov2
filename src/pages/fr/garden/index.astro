---
import Layout from '../../../layouts/Layout.astro';
import GardenTranslation from '../../../components/GardenTranslation.astro';
import type { MarkdownInstance } from 'astro';
import GardenBadge from '../../../components/GardenBadge.astro';

interface Frontmatter {
    title: string;
    date?: string;
    description?: string;
    topics?: string[];
    lastModified?: string;
}

const gardenNotes = await Astro.glob('./**/*.md');

function normalizeTag(tag: string): string {
    return tag.toLowerCase().trim();
}

const categoryCount = gardenNotes.reduce((acc, note) => {
    note.frontmatter.topics?.forEach(topic => {
        const normalizedTopic = normalizeTag(topic);
        acc[normalizedTopic] = (acc[normalizedTopic] || 0) + 1;
    });
    return acc;
}, {} as Record<string, number>);

const allCategories = [...new Set(gardenNotes.flatMap(note => 
    note.frontmatter.topics?.map(normalizeTag) || []
))].sort();

const sortedNotes = gardenNotes
    .sort((a, b) => {
        return new Date(b.frontmatter.lastModified).getTime() - new Date(a.frontmatter.lastModified).getTime();
    });

const translations = {
    title: "Jardin Numérique",
    intro: "Contrairement à un blog, le Jardin Numérique est une collection évolutive de notes et de réflexions qui se développent au fil du temps.",
    learnMore: "En savoir plus sur les jardins numériques",
    searchNotes: "Chercher dans les notes",
    filterAndSearch: "Filtrer & Chercher",
    allTopics: "tous les sujets",
    topics: "Sujets",
    tended: "Dernière mise à jour le",
    closeFilters: "Fermer les filtres",
    notesFound: (count: number) => `${count} note${count !== 1 ? 's' : ''} trouvée${count !== 1 ? 's' : ''}`,
};
---

<Layout>
    <div class="page-container">
        <header class="header-content">
            <div class="header-top">
                <h1 class="section-title">{translations.title}</h1>
                <p class="garden-intro">
                    {translations.intro}
                    <a href="https://maggieappleton.com/garden-history/" target="_blank" rel="noopener">
                        {translations.learnMore}
                    </a>
                </p>
            </div>

            <div class="garden-buttons">
                <button class="filter-button" aria-expanded="false" aria-label={translations.filterAndSearch}>
                    <span class="filter-label">{translations.filterAndSearch}</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="4" y1="21" x2="4" y2="14"/>
                        <line x1="4" y1="10" x2="4" y2="3"/>
                        <line x1="12" y1="21" x2="12" y2="12"/>
                        <line x1="12" y1="8" x2="12" y2="3"/>
                        <line x1="20" y1="21" x2="20" y2="16"/>
                        <line x1="20" y1="12" x2="20" y2="3"/>
                    </svg>
                </button>
                <GardenTranslation currentPath="/fr/garden" />
            </div>
        </header>

        <div class="active-filters" aria-live="polite"></div>

        <main class="notes-content">
            <div class="notes-grid">
                {sortedNotes.map((note) => (
                    <a href={note.url} 
                       class="note-card" 
                       data-categories={note.frontmatter.topics?.map(normalizeTag).join('|')}>
                        <time class="last-tended">
                            {new Date(note.frontmatter.lastModified).toLocaleDateString('fr-FR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            })}
                        </time>
                        <h2>{note.frontmatter.title}</h2>
                        <p>{note.frontmatter.description}</p>
                    </a>
                ))}
            </div>
        </main>

        <div class="filter-drawer" hidden>
            <div class="drawer-scrim"></div>
            <div class="drawer-panel" role="dialog" aria-labelledby="drawer-title">
                <div class="drawer-header">
                    <h2 id="drawer-title" class="drawer-title">{translations.filterAndSearch}</h2>
                    <button class="close-drawer" aria-label={translations.closeFilters}>×</button>
                </div>
                
                <div class="drawer-content">
                    <div class="search-section" role="search">
                        <div class="search-field">
                            <h3 class="section-heading" id="search-label">{translations.searchNotes}</h3>
                            <div class="search-input-wrapper">
                                <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                                    <circle cx="11" cy="11" r="8"/>
                                    <line x1="21" y1="21" x2="16.65" y2="16.65"/>
                                </svg>
                                <input 
                                    type="search" 
                                    id="garden-search"
                                    class="search-input"
                                    aria-labelledby="search-label"
                                />
                            </div>
                        </div>
                        <div class="search-results" aria-live="polite">
                            <span class="results-count"></span>
                        </div>
                    </div>

                    <div class="filter-section">
                        <h3 class="section-heading">{translations.topics}</h3>
                        <div class="filter-tags" role="group" aria-label={translations.topics}>
                            <button class="tag active" data-category="all">
                                {translations.allTopics}
                                <span class="count">{gardenNotes.length}</span>
                            </button>
                            {allCategories.map(category => (
                                <button class="tag" data-category={category}>
                                    {category}
                                    <span class="count">{categoryCount[category]}</span>
                                </button>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</Layout>

<style>
    /* Using identical styles from garden.astro */
    .garden-header {
        margin-bottom: var(--space-xl);
    }

    .garden-intro {
        color: var(--color-muted);
        max-width: 65ch;
    }

    .garden-layout {
        display: grid;
        grid-template-columns: minmax(250px, 1fr) 3fr;
        margin-top: var(--space-lg);
        gap: var(--space-xl);
        align-items: start;
    }

    .garden-sidebar {
        position: sticky;
        top: 5rem;
    }

    .sidebar-section {
        margin-bottom: var(--space-lg);
    }

    .sidebar-section h2 {
        font-size: 0.875rem;
        font-family: var(--font-mono);
        color: var(--color-muted);
        margin-bottom: var(--space-sm);
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem;
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-fg);
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        transition: all 0.3s var(--ease-out-spring);
    }

    .search-input:focus {
        outline: none;
        border-color: var(--color-accent);
        box-shadow: 0 0 0 3px rgba(255, 68, 68, 0.1);
    }

    .filter-tags {
        display: flex;
        flex-direction: column;
        gap: var(--space-xs);
    }

    .tag {
        display: flex;
        align-items: center;
        text-align: start;
        gap: 0.5rem;
        font-family: var(--font-mono);
        font-size: 1rem;
        color: var(--color-muted);
        padding: 1rem 1rem;
        border: 1px solid var(--color-border);
        border-radius: 2px;
        background: var(--color-surface);
        cursor: pointer;
        transition: all 0.3s var(--ease-out-spring);
    }

    .tag:hover, .tag.active {
        background: var(--color-accent);
        color: white;
        border-color: var(--color-accent);
    }

    .count {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 1.5rem;
        height: 1.5rem;
        padding: 0 0.5rem;
        border-radius: 12px;
        background: var(--color-border);
        color: var(--color-muted);
        font-size: 0.75rem;
    }

    .tag:hover .count,
    .tag.active .count {
        background: rgba(255, 255, 255, 0.2);
        color: white;
    }

    .notes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: var(--space-sm);
    }

    .note-card {
        display: block;
        text-decoration: none;
        color: inherit;
        padding: var(--space-lg);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        background: rgba(255, 255, 255, 0.8);
        transition: all 0.3s var(--ease-out-spring);
        transform-style: preserve-3d;
        perspective: 1000px;
    }

    .note-card:hover {
        border-color: var(--color-accent);
        transform: translateX(1rem) translateZ(20px) rotateX(2deg) rotateY(-2deg);
    }

    .note-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-sm);
    }

    .last-tended {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-muted);
    }

    .note-card h2 {
        font-size: 1.5rem;
        margin: var(--space-sm) 0;
        line-height: 1.2;
    }

    .note-card p {
        color: var(--color-muted);
        margin-bottom: var(--space-md);
        line-height: 1.5;
    }

    @media (max-width: 768px) {
        .garden-layout {
            grid-template-columns: 1fr;
        }

        .garden-sidebar {
            position: relative;
            top: 0;
            padding: var(--space-md);
            background: var(--color-surface);
            border: 1px solid var(--color-border);
            border-radius: var(--curve-sm);
            margin-bottom: var(--space-lg);
        }

        .filter-tags {
            flex-direction: row;
            flex-wrap: wrap;
        }

        .notes-grid {
            grid-template-columns: 1fr;
        }
    }

    .garden-buttons {
        display: flex;
        gap: var(--space-sm);
    }

    .filter-button {
        display: flex;
        align-items: center;
        gap: var(--space-sm);
        padding: 0.75rem 1rem;
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-muted);
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        cursor: pointer;
        transition: all 0.3s var(--ease-out-spring);
        white-space: nowrap;
        flex-shrink: 0;
    }

    .filter-button:hover {
        color: var(--color-fg);
        border-color: var(--color-accent);
    }

    .filter-button[aria-expanded="true"] {
        background: var(--color-accent);
        color: white;
        border-color: var(--color-accent);
    }

    .filter-drawer {
        position: fixed;
        inset: 0;
        z-index: 1000;
        display: flex;
    }

    .drawer-scrim {
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.3);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1000;
    }

    .filter-drawer[hidden] {
        pointer-events: none;
    }

    .filter-drawer:not([hidden]) {
        .drawer-scrim {
            opacity: 1;
        }
        .drawer-panel {
            transform: translateX(0);
        }
    }

    .drawer-panel {
        position: relative;
        width: min(400px, 90vw);
        height: 100%;
        background: var(--color-surface);
        border-right: 1px solid var(--color-border);
        transform: translateX(-100%);
        transition: transform 0.3s var(--ease-out-spring);
        display: flex;
        flex-direction: column;
        z-index: 1001;
    }

    .drawer-header {
        position: sticky;
        top: 0;
        background: var(--color-surface);
        z-index: 2;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--space-sm) var(--space-lg);
        border-bottom: 1px solid var(--color-border);
    }

    .drawer-content {
        flex: 1;
        padding: var(--space-lg);
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
    }

    .section-heading {
        font-size: 0.875rem;
        font-family: var(--font-mono);
        color: var(--color-muted);
        margin: 0;
        font-weight: 500;
        padding-top: var(--space-sm);
        padding-bottom: 1rem;
    }

    .search-section {
        margin-bottom: var(--space-sm);
    }

    .drawer-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        color: var(--color-fg);
    }

    @media (max-width: 768px) {
        .drawer-content {
            padding-bottom: calc(var(--space-xl) * 2);
        }
        
        .header-bottom {
            flex-direction: column;
            gap: var(--space-md);
        }

        .filter-button {
            width: 100%;
            justify-content: center;
        }
    }
</style>

<script>
    interface NoteElement extends HTMLElement {
        style: CSSStyleDeclaration;
    }

    const filterButton = document.querySelector('.filter-button') as HTMLButtonElement;
    const filterDrawer = document.querySelector('.filter-drawer') as HTMLElement;
    const closeDrawer = document.querySelector('.close-drawer') as HTMLButtonElement;
    const activeFiltersContainer = document.querySelector('.active-filters') as HTMLElement;
    const filterButtons = document.querySelectorAll<HTMLButtonElement>('.tag');
    const noteCards = document.querySelectorAll<NoteElement>('.note-card');
    const searchInput = document.getElementById('garden-search') as HTMLInputElement;
    const resultsCount = document.querySelector('.results-count') as HTMLElement;
    const drawerScrim = document.querySelector('.drawer-scrim') as HTMLElement;
    
    interface FilterState {
        activeFilters: string[];
        searchTerm: string;
    }

    const state: FilterState = {
        activeFilters: [],
        searchTerm: ""
    };

    function updateActiveFilters(filters: string[]) {
        state.activeFilters = filters;
        
        activeFiltersContainer.innerHTML = filters
            .map(filter => `
                <span class="filter-chip">
                    ${filter}
                    <button onclick="removeFilter('${filter}')" aria-label="Supprimer le filtre ${filter}">×</button>
                </span>
            `)
            .join('');

        filterButton.setAttribute('aria-expanded', (filters.length > 0).toString());
        filterDrawer.hidden = filters.length === 0;

        filterButtons.forEach(btn => {
            const category = btn.dataset.category || 'all';
            btn.classList.toggle('active', filters.includes(category));
        });
    }

    function normalizeTag(tag: string): string {
        return tag.toLowerCase().trim();
    }

    function filterNotes(category: string) {
        const normalizedCategory = category.toLowerCase().trim();
        
        if (category === 'all') {
            updateActiveFilters([]);
        } else {
            updateActiveFilters([category]);
        }

        noteCards.forEach(card => {
            if (category === 'all') {
                card.style.display = '';
                return;
            }

            const categories = (card.dataset.categories || '').split('|');
            const hasCategory = categories.some(cat => 
                normalizeTag(cat) === normalizedCategory
            );
            
            card.style.display = hasCategory ? '' : 'none';
        });
    }

    // Drawer controls
    filterButton?.addEventListener('click', () => {
        filterDrawer.hidden = false;
        filterButton.setAttribute('aria-expanded', 'true');
        document.body.style.overflow = 'hidden';
        // Force a reflow to trigger animation
        filterDrawer.offsetHeight;
    });

    function closeFilterDrawer() {
        filterDrawer.hidden = true;
        filterButton.setAttribute('aria-expanded', 'false');
        document.body.style.overflow = '';
    }

    closeDrawer?.addEventListener('click', closeFilterDrawer);
    drawerScrim?.addEventListener('click', closeFilterDrawer);
    
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !filterDrawer.hidden) {
            closeFilterDrawer();
        }
    });

    // Filter button handlers
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            const category = button.dataset.category || 'all';
            filterNotes(category);
        });
    });

    // Search functionality with French text
    searchInput?.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
        state.searchTerm = searchTerm;
        let visibleCount = 0;
        
        noteCards.forEach(note => {
            const title = note.querySelector('h2')?.textContent?.toLowerCase() || '';
            const description = note.querySelector('p')?.textContent?.toLowerCase() || '';
            const topics = note.getAttribute('data-topics')?.toLowerCase() || '';
            
            const matches = title.includes(searchTerm) || 
                          description.includes(searchTerm) || 
                          topics.includes(searchTerm);

            note.style.display = matches ? '' : 'none';
            if (matches) visibleCount++;
        });

        if (searchTerm && resultsCount) {
            resultsCount.textContent = `${visibleCount} note${visibleCount !== 1 ? 's' : ''} trouvée${visibleCount !== 1 ? 's' : ''}`;
        } else if (resultsCount) {
            resultsCount.textContent = '';
        }
    });

    // Initialize from session storage
    document.addEventListener('DOMContentLoaded', () => {
        const selectedCategory = sessionStorage.getItem('selectedCategory');
        if (selectedCategory) {
            filterNotes(selectedCategory);
            sessionStorage.removeItem('selectedCategory');
        }
    });
</script>
