---
import Layout from '../../../layouts/Layout.astro';
import GardenTranslation from '../../../components/GardenTranslation.astro';
import type { MarkdownInstance } from 'astro';
import GardenBadge from '../../../components/GardenBadge.astro';

interface Frontmatter {
    title: string;
    date?: string;
    description?: string;
    topics?: string[];
    lastModified?: string;
}

const gardenNotes = await Astro.glob('./**/*.md');

function normalizeTag(tag: string): string {
    return tag.toLowerCase().trim();
}

const categoryCount = gardenNotes.reduce((acc, note) => {
    note.frontmatter.topics?.forEach(topic => {
        const normalizedTopic = normalizeTag(topic);
        acc[normalizedTopic] = (acc[normalizedTopic] || 0) + 1;
    });
    return acc;
}, {} as Record<string, number>);

const allCategories = [...new Set(gardenNotes.flatMap(note => 
    note.frontmatter.topics?.map(normalizeTag) || []
))].sort();

const sortedNotes = gardenNotes
    .sort((a, b) => {
        return new Date(b.frontmatter.lastModified).getTime() - new Date(a.frontmatter.lastModified).getTime();
    });

const translations = {
    title: "Jardin Numérique",
    intro: "Contrairement à un blog, le Jardin Numérique est une collection évolutive de notes et de réflexions qui se développent au fil du temps. C'est ici que je collecte et affine mes pensées, idées et connaissances sur des sujets qui m'intéressent. L'idée est d'\"apprendre en public\".",
    learnMore: "En savoir plus sur les jardins numériques",
    searchLabel: "Rechercher des notes",
    filterByTag: "Filtrer par tag",
    allTags: "tous les tags",
    tended: "Dernière mise à jour le",
    language: "Langue"
};
---

<Layout>
    <div class="page-container">
        <header class="header-content">
            <h1 class="section-title">{translations.title}</h1>
            <p class="garden-intro">
                {translations.intro}
                <a href="https://maggieappleton.com/garden-history/" target="_blank" rel="noopener">
                    {translations.learnMore}
                </a>
            </p>
        </header>

        <div class="garden-layout">
            <aside class="garden-sidebar">
                <div class="sidebar-section">
                    <GardenTranslation currentPath="/fr/garden" />
                </div>
                
                <div class="sidebar-section">
                    <h2>{translations.searchLabel}</h2>
                    <input 
                        type="search" 
                        id="garden-search"
                        class="search-input" 
                        aria-label={translations.searchLabel}
                    />
                </div>

                <div class="sidebar-section">
                    <h2>{translations.filterByTag}</h2>
                    <div class="filter-tags">
                        <button class="tag active" data-category="all">
                            {translations.allTags}
                            <span class="count">{gardenNotes.length}</span>
                        </button>
                        {allCategories.map(category => (
                            <button class="tag" data-category={category}>
                                {category}
                                <span class="count">{categoryCount[category]}</span>
                            </button>
                        ))}
                    </div>
                </div>
            </aside>

            <main class="garden-content">
                <div class="notes-grid">
                    {sortedNotes.map((note) => (
                        <a href={note.url} 
                           class="note-card" 
                           data-categories={note.frontmatter.topics?.map(normalizeTag).join('|')}>
                            <div class="note-header">
                                <time class="last-tended">
                                    {translations.tended} {new Date(note.frontmatter.lastModified).toLocaleDateString('fr-FR', {
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric'
                                    })}
                                </time>
                            </div>
                            <h2>{note.frontmatter.title}</h2>
                            <p>{note.frontmatter.description}</p>
                        </a>
                    ))}
                </div>
            </main>
        </div>
        <div class="cursor-text"></div>
    </div>
    <GardenBadge />
</Layout>

<style>
    /* Using identical styles from garden.astro */
    .garden-header {
        margin-bottom: var(--space-xl);
    }

    .garden-intro {
        color: var(--color-muted);
        max-width: 65ch;
    }

    .garden-layout {
        display: grid;
        grid-template-columns: minmax(250px, 1fr) 3fr;
        margin-top: var(--space-lg);
        gap: var(--space-xl);
        align-items: start;
    }

    .garden-sidebar {
        position: sticky;
        top: 5rem;
    }

    .sidebar-section {
        margin-bottom: var(--space-lg);
    }

    .sidebar-section h2 {
        font-size: 0.875rem;
        font-family: var(--font-mono);
        color: var(--color-muted);
        margin-bottom: var(--space-sm);
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem;
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-fg);
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        transition: all 0.3s var(--ease-out-spring);
    }

    .search-input:focus {
        outline: none;
        border-color: var(--color-accent);
        box-shadow: 0 0 0 3px rgba(255, 68, 68, 0.1);
    }

    .filter-tags {
        display: flex;
        flex-direction: column;
        gap: var(--space-xs);
    }

    .tag {
        display: flex;
        align-items: center;
        text-align: start;
        gap: 0.5rem;
        font-family: var(--font-mono);
        font-size: 1rem;
        color: var(--color-muted);
        padding: 1rem 1rem;
        border: 1px solid var(--color-border);
        border-radius: 2px;
        background: var(--color-surface);
        cursor: pointer;
        transition: all 0.3s var(--ease-out-spring);
    }

    .tag:hover, .tag.active {
        background: var(--color-accent);
        color: white;
        border-color: var(--color-accent);
    }

    .count {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 1.5rem;
        height: 1.5rem;
        padding: 0 0.5rem;
        border-radius: 12px;
        background: var(--color-border);
        color: var(--color-muted);
        font-size: 0.75rem;
    }

    .tag:hover .count,
    .tag.active .count {
        background: rgba(255, 255, 255, 0.2);
        color: white;
    }

    .notes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: var(--space-sm);
    }

    .note-card {
        display: block;
        text-decoration: none;
        color: inherit;
        padding: var(--space-lg);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        background: rgba(255, 255, 255, 0.8);
        transition: all 0.3s var(--ease-out-spring);
        transform-style: preserve-3d;
        perspective: 1000px;
    }

    .note-card:hover {
        border-color: var(--color-accent);
        transform: translateX(1rem) translateZ(20px) rotateX(2deg) rotateY(-2deg);
    }

    .note-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-sm);
    }

    .last-tended {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-muted);
    }

    .note-card h2 {
        font-size: 1.5rem;
        margin: var(--space-sm) 0;
        line-height: 1.2;
    }

    .note-card p {
        color: var(--color-muted);
        margin-bottom: var(--space-md);
        line-height: 1.5;
    }

    @media (max-width: 768px) {
        .garden-layout {
            grid-template-columns: 1fr;
        }

        .garden-sidebar {
            position: relative;
            top: 0;
            padding: var(--space-md);
            background: var(--color-surface);
            border: 1px solid var(--color-border);
            border-radius: var(--curve-sm);
            margin-bottom: var(--space-lg);
        }

        .filter-tags {
            flex-direction: row;
            flex-wrap: wrap;
        }

        .notes-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    interface NoteElement extends HTMLElement {
        style: CSSStyleDeclaration;
    }

    const filterButtons = document.querySelectorAll<HTMLButtonElement>('.tag');
    const noteCards = document.querySelectorAll<NoteElement>('.note-card');
    const searchInput = document.getElementById('garden-search') as HTMLInputElement;

    function normalizeTag(tag: string): string {
        return tag.toLowerCase().trim();
    }

    function filterNotes(category: string) {
        const normalizedCategory = category.toLowerCase().trim();
        
        filterButtons.forEach(btn => {
            btn.classList.toggle('active', normalizeTag(btn.dataset.category || '') === normalizedCategory);
        });

        noteCards.forEach(card => {
            if (category === 'all') {
                card.style.display = '';
                return;
            }

            const categories = (card.dataset.categories || '').split('|');
            card.style.display = categories.some(cat => normalizeTag(cat) === normalizedCategory) ? '' : 'none';
        });
    }

    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            const category = button.dataset.category || 'all';
            filterNotes(category);
        });
    });

    searchInput?.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
        
        noteCards.forEach(note => {
            const title = note.querySelector('h2')?.textContent?.toLowerCase() || '';
            const description = note.querySelector('p')?.textContent?.toLowerCase() || '';
            const matches = title.includes(searchTerm) || description.includes(searchTerm);
            note.style.display = matches ? '' : 'none';
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const selectedCategory = sessionStorage.getItem('selectedCategory');
        if (selectedCategory) {
            filterNotes(selectedCategory);
            sessionStorage.removeItem('selectedCategory');
        }
    });
</script>
