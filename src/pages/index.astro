---
import Layout from '../layouts/Layout.astro';
const posts = await Astro.glob('./writing/*.md');

const projects = [
{
        title: "Pekin Insurance User Experience Strategy",
        category: "UX Research Strategy ✦ Product Leadership",
        year: "2024",
        description: "Leading a user research strategy to guide Pekin Insurance's digital transformation",
        image: "/pekin-thumbnail.png",
        slug: "insurance-research-strategy"  
    },
    {
        title: "Creating the Silver Design System and Framework",
        category: "UX Research ✦ Accessibility",
        year: "2024",
        description: "A design system and framework to support senior user needs",
        image: "/silverdesign-thumb.png",
        slug: "silver-design-framework"  
    },
    {
        title: "Improving healthcare access for blind and low vision users",
        category: "UX Research ✦ Accessibility",
        year: "2024",
        description: "Evaluating the accessibility of ZocDoc with users experiencing blindness and low vision (BLV).",
        image: "/zocdoc-thumbnail.png",
        slug: "zocdoc-accessibility-research"
    },
];
---

<Layout>
    <div class="editorial-container">
        <main class="content-area" data-section="intro">
            <div class="hero-sequence">
                <div class="name-block">
                    <h1 class="hero-title">
                        <span class="title-line">
                            <span class="text" style="transform: none; opacity: 1;">johanna sneed</span>
                            <div class="floating-shapes">
                                <div class="shape circle animate-float" style="--delay: 0s"></div>
                                <div class="shape square animate-float" style="--delay: 0.2s"></div>
                                <div class="shape triangle animate-float" style="--delay: 0.4s"></div>
                            </div>
                        </span>
                    </h1>
                    <div class="role-tags" style="opacity: 1;">
                        <span class="role-tag">User Experience Researcher</span>
                        <span class="divider"></span>
                        <span class="role-tag">Inclusive Design Advocate</span>
                    </div>
                </div>
            </div>
        </main>

        <div class="interaction-layer">
            <div class="magnetic-area" data-strength="0.2"></div>
            <div class="cursor-follower"></div>
        </div>

        <section class="portfolio-preview" data-section="work">
            <div class="preview-header">
                <h2 class="section-title">Selected work</h2>
                <div class="preview-nav">
                    <div class="nav-line"></div>
                    <a href="/portfolio" class="view-all">All portfolio case studies →</a>
                </div>
            </div>
            
            <div class="featured-projects">
                {projects.slice(0, 3).map((project, index) => (
                    <a href={`/case-study/${project.slug}`} class="project-item" data-index={index}>
                        <div class="project-content">
                            <div class="project-meta">
                                <span class="project-category">{project.category}</span>
                            </div>
                            <h3 class="project-title">{project.title}</h3>
                            <p class="project-description">{project.description}</p>
                            <span class="project-link">
                                <span>Go to case study</span>
                                <span class="arrow">→</span>
                            </span>
                        </div>
                        <div class="project-image">
                            <img src={project.image} alt={project.title} />
                        </div>
                    </a>
                ))}
            </div>
        </section>

        <section class="blog-preview" data-section="blog">
            <div class="preview-header">
                <h2 class="section-title">Latest writing</h2>
                <div class="preview-nav">
                    <div class="nav-line"></div>
                    <a href="/writing" class="view-all">All writing →</a>
                </div>
            </div>
            
            <div class="blog-posts">
                {posts.slice(0, 3).map((post) => (
                    <a href={post.url} class="blog-card">
                        <time class="post-date">{post.frontmatter.date}</time>
                        <h3 class="post-title">{post.frontmatter.title}</h3>
                        <p class="post-excerpt">{post.frontmatter.excerpt}</p>
                        <span class="read-more">
                            Read More <span class="arrow">→</span>
                        </span>
                    </a>
                ))}
            </div>
        </section>
    </div>
</Layout>

<style>
    .editorial-container {
        min-height: 100vh;
        display: block;  
        background: var(--color-bg);
        position: relative;
    }

    .editorial-container::before {
        content: '';
        position: fixed;
        inset: 0;
        background: url('/noise.png');
        opacity: 0.3;
        mix-blend-mode: overlay;
        pointer-events: none;
        z-index: 1;
    }

    .content-area {
        padding: 8vh 4rem;
        max-width: var(--max-width);
        margin: 0 auto;
    }

    .hero-sequence {
        position: relative;
        padding: clamp(4rem, 5vh, 16rem) 0;
        width: 100%;
        transform-style: preserve-3d;
        perspective: 1000px;
    }

    .name-block {
        position: relative;
        margin-left: -0.5rem;
        max-width: 100%; 
        padding-right: 1rem; /* Add padding to prevent text touching edge */
        text-wrap: balance;

    }

    .hero-title {
        position: relative;
        font-family: var(--font-special);
        font-weight: 400;
        margin: 0;
        line-height: 0.9;
    }

    .title-line {
        display: block;
        text-wrap: balance;

    }

    .title-line span {
        display: block;
        font-size: clamp(2.5rem, 15vw, 11rem); /* Adjust clamp values */
        letter-spacing: -0.02em; /* Reduce letter spacing on mobile */
        color: var(--color-fg); /* Ensure all text is black */
    }

    .floating-shapes {
        position: absolute;
        top: -2rem;
        right: -2rem;
        width: clamp(100px, 20vw, 200px);
        height: clamp(100px, 20vw, 200px);
        pointer-events: none;
    }

    .shape {
        position: absolute;
        opacity: 0;
        transform: translateY(20px);
        animation: floatIn 0.8s var(--ease-out-spring) forwards;
        animation-delay: var(--delay);
        transform: translateZ(50px);
        filter: drop-shadow(0 20px 30px rgba(0, 0, 0, 0.1));
    }

    .circle {
        width: 12px;
        height: 12px;
        background: var(--color-accent);
        border-radius: 50%;
        right: 40px;
        top: 20px;
        animation-delay: 0.2s;
    }

    .square {
        width: 10px;
        height: 10px;
        border: 2px solid var(--color-accent);
        right: 80px;
        top: 60px;
        animation-delay: 0.4s;
    }

    .triangle {
        width: 0;
        height: 0;
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        border-bottom: 14px solid var(--color-accent);
        right: 20px;
        top: 40px;
        animation-delay: 0.6s;
    }


    .role-tags {
        margin: 0 0 0 3.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        opacity: 1;
    }

    .role-tag {
        font-family: var(--font-mono);
        font-size: clamp(0.875rem, 1.5vw, 1.5rem);
        color: var(--color-muted); /* Make tags more subtle */
        font-weight: 400;
        position: relative;
    }

    .divider {
        color: var(--color-accent);
        font-size: 1.5rem;
        line-height: 0;
    }

    .role-tag:not(:last-child)::after {
        content: '/';
        margin-left: 1rem;
        color: var(--color-accent);
    }

    .role-tag.accent {
        color: var(--color-accent);
    }

    .hero-decoration {
        position: absolute;
        right: 0;
        bottom: 0;
        width: 40%;
        height: 4px;
        display: flex;
        align-items: center;
        opacity: 0;
        animation: fadeIn 0.8s var(--ease-out-spring) 0.8s forwards;
    }

    .decoration-line {
        flex: 1;
        height: 100%;
        background: var(--color-accent);
        transform: scaleX(0);
        transform-origin: right;
        animation: scaleIn 1.2s var(--ease-out-spring) 0.8s forwards;
    }

    .accent-circle {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: var(--color-accent);
        margin-left: -6px;
    }

    @keyframes slideUp {
        to {
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        to {
            opacity: 1;
        }
    }

    @keyframes scaleIn {
        to {
            transform: scaleX(1);
        }
    }

    @keyframes floatIn {
        to {
            opacity: 1;
            transform: none;
        }
    }

    @media (hover: hover) {
        .hero-title:hover .shape {
            animation: float 3s var(--ease-out-spring) infinite;
        }

        .hero-title:hover .square {
            animation-delay: 0.2s;
        }

        .hero-title:hover .triangle {
            animation-delay: 0.4s;
        }
    }

    @keyframes float {
        0%, 100% { transform: translate(0, 0); }
        50% { transform: translate(-10px, -10px); }
    }

    @media (max-width: 768px) {
        .hero-sequence {
            padding: 6rem 1rem 4rem;
        }



        .hero-decoration {
            width: 60%;
        }
    }

    .meta-text {
        box-sizing: border-box;
        font-family: var(--font-mono);
        font-size: 1rem;
        letter-spacing: 0.2em;
        color: white;
        max-width: 92.5%;
        padding: 0 2rem;
        background-color: var(--color-accent);
        margin: 0 0 0 2.5rem;
    }

    .first-name {
        font-family: var(--font-special);
        font-size: clamp(4rem, 12vw, 11rem);
        margin-bottom:-1rem;

    }

    .accent-bars {
        position: absolute;
        left: 0;
        bottom: -2rem;
        display: flex;
        gap: 0.5rem;
    }

    .bar {
        height: 4px;
        background: var(--color-accent);
    }

    .bar:nth-child(1) { width: 40%; }
    .bar:nth-child(2) { width: 20%; }
    .bar:nth-child(3) { width: 10%; }

    @keyframes fadeUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes growBar {
        to { transform: scaleX(1); }
    }

    @keyframes fadeIn {
        to { opacity: 1; }
    }

  

    .interaction-layer {
        position: fixed;
        inset: 0;
        pointer-events: none;
        z-index: 10;
    }



    .first-name:hover {
        transform: perspective(1000px) rotateX(5deg);
        color: var(--color-accent);
    }

    .accent-bars {
        transition: transform 0.3s var(--ease-out-spring);
    }

    .name-block:hover .accent-bars {
        transform: translateX(20px);
    }

    .portfolio-preview {
        padding: var(--space-xl) var(--space-lg);
        margin: 0 auto;
        max-width: var(--max-width);
    }

    .preview-header {
        display: grid;
        grid-template-columns: 1fr auto;
        align-items: center;
        gap: var(--space-lg);
        margin-bottom: var(--space-md);
    }

    .preview-nav {
        display: flex;
        align-items: center;
        gap: var(--space-md);
    }

    .nav-line {
        width: 60px;
        height: 1px;
        background: var(--color-accent);
    }

    .featured-projects {
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
    }

    .project-item {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        align-items: center;
        padding: var(--space-md) var(--space-lg);
        position: relative;
        border: 1px solid var(--color-border);
        background: rgba(255, 255, 255, 0.8);
        border-radius: var(--curve-sm);
        transition: all 0.4s var(--ease-out-spring);
        transition: all 0.4s var(--ease-out-spring),
                    border-color 0.3s ease;
        cursor: none;  /* Add this */
        text-decoration: none;  /* Add this */
        color: inherit;  /* Add this */
        transform-style: preserve-3d;
        perspective: 1000px;
    }

    .project-item:hover {
        border-color: var(--color-accent);
        transform: translateX(var(--space-sm)) translateZ(20px) rotateX(2deg) rotateY(-2deg);
    }

    .project-content,
    .project-image {
        position: relative;
        z-index: 1;
    }

    .project-meta {
        display: flex;
        align-items: center;
        gap: var (--space-md);
        margin-bottom:0);
    }

    .project-number {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
    }

    .project-category {
        font-family: var(--font-mono);
        font-size: .9rem;
        color: var(--color-accent);
    }

    .project-title {
        font-family: var(--font-special);
        line-height:1;
        font-size: clamp(1.5rem, 3vw, 2.5rem);
        margin: 1rem 0;
    }

    .project-description {
        color: var(--color-muted);
        margin: 0;
        max-width: 40ch;
    }

    .project-image {
        position: relative;
        border-radius: var(--curve-sm);
        overflow: hidden;
    }

    .project-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.6s var(--ease-out-spring);
    }

    .project-item:hover .project-image img {
        transform: scale(1.05);
    }

    .project-link {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: var(--space-md);
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
        text-decoration: none;
        opacity: 0;
        transform: translateX(-10px);
        transition: all 0.3s var(--ease-out-spring);
    }

    .project-item:hover .project-link {
        opacity: 1;
        transform: translateX(0);
    }

    .project-link .arrow {
        transition: transform 0.3s var(--ease-out-spring);
    }

    .project-link:hover .arrow {
        transform: translateX(6px);
    }

    @media (max-width: 768px) {
        .content-area {
            padding: 8rem 1rem 4rem; /* Adjust top padding for header */
        }

        .hero-sequence {
            padding: 0; /* Remove extra padding on mobile */
        }

        .name-block {
            margin-left: 0; /* Remove negative margin on mobile */
        }

        .floating-shapes {
            transform: scale(0.7); /* Scale down decorative elements */
            right: -1rem;
        }

        .role-tag {
            font-size: 0.875rem; /* Smaller font size on mobile */
        }
        .project-item,
        .project-item:nth-child(even) {
            grid-template-columns: 1fr;
            padding: var(--space-md);
        }

        .project-item:nth-child(even) .project-content {
            order: 1;
        }
    }

    .view-all {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: gap 0.3s var(--ease-out-spring);
    }

    .view-all:hover {
        gap: 1rem;
    }

    .blog-preview {
        padding: var(--space-xl) var(--space-lg);
        margin: 0 auto;
        max-width: var(--max-width);
    }

    .blog-posts {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: var(--space-lg);
        background: rgba(255, 255, 255, 0.8);

    }

    .blog-card {
        cursor: none;  /* Add this */
        text-decoration: none;  /* Add this */
        color: inherit;  /* Add this */
        padding: var(--space-lg);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        transition: all 0.3s var(--ease-out-spring);
    }

    .blog-card:hover {
        transform: translateY(-4px);
        border-color: var(--color-accent);
    }

    .post-date {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var (--color-muted);
        display: block;
        margin-bottom: var(--space-sm);
    }

    .post-title {
        font-family: var(--font-special);
        font-size: 1.5rem;
        margin: 0;
        margin-bottom: var(--space-sm);
    }

    .post-excerpt {
        color: var(--color-muted); 
        margin: 0;
        margin-bottom: var(--space-md);
    }

    .read-more {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: var(--space-md);
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
    }

    .read-more span {
        transition: transform 0.3s var (--ease-out-spring);
    }

    .read-more:hover span {
        transform: translateX(4px);
    }

    .first-name {
        display: inline-block;
    }

    @media (prefers-reduced-motion: reduce) {
        * {
            animation: none !important;
            transition: none !important;
        }
    }

    /* Remove potentially conflicting animations */
    .split-text,
    .split-chars {
        opacity: 1;
        transform: none;
    }

    @media (prefers-reduced-motion: reduce) {
        .split-text,
        .split-chars,
        .project-item,
        .blog-card {
            opacity: 1 !important;
            transform: none !important;
            transition: none !important;
        }
    }
</style>

<script>
    import gsap from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    import SplitType from 'split-type';

    gsap.registerPlugin(ScrollTrigger);

    document.addEventListener('DOMContentLoaded', () => {
        // Remove all initial animations
        // Keep only the mouse movement effects
        const shapes = document.querySelectorAll('.shape');
        document.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX / window.innerWidth - 0.5;
            const mouseY = e.clientY / window.innerHeight - 0.5;
            shapes.forEach(shape => {
                const speed = 20;
                const x = mouseX * speed;
                const y = mouseY * speed;
                (shape as HTMLElement).style.transform = 
                    `translate(${x}px, ${y}px)`;
            });
        });
    });

    // Add scroll progress indicator
    window.addEventListener('scroll', () => {
        const scrollPercent = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
        const progressBar = document.querySelector('.scroll-progress') as HTMLElement;
        progressBar?.style.setProperty('--scroll', `${scrollPercent}%`);
    });


    // Add this to your existing script
    document.addEventListener('mousemove', (e) => {
        const shapes = document.querySelectorAll('.shape');
        const mouseX = e.clientX / window.innerWidth - 0.5;
        const mouseY = e.clientY / window.innerHeight - 0.5;

        shapes.forEach(shape => {
            const speed = 20;
            const x = mouseX * speed;
            const y = mouseY * speed;
            (shape as HTMLElement).style.transform = 
                `translate(${x}px, ${y}px)`;
        });
    });

    // Conditional mouse effects
    const isFinePointer = window.matchMedia('(pointer: fine)').matches;
    
    if (isFinePointer) {
        // ...existing magnetic effect code...
    }

    // Add cursor effect for project cards and blog cards
    const projectCards = document.querySelectorAll('.project-item');
    const blogCards = document.querySelectorAll('.blog-card');
    const cursorText = document.querySelector('.cursor-text') as HTMLDivElement;

    // Project card cursor effect
    projectCards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            if (cursorText) {
                cursorText.textContent = 'Go to case study';
                cursorText.style.opacity = '1';
                cursorText.style.transform = 'translate(-50%, -50%) scale(1)';
            }
        });

        card.addEventListener('mouseleave', () => {
            if (cursorText) {
                cursorText.style.opacity = '0';
                cursorText.style.transform = 'translate(-50%, -50%) scale(0.5)';
            }
        });
    });

    // Blog card cursor effect
    blogCards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            if (cursorText) {
                cursorText.textContent = 'Read the Article';
                cursorText.style.opacity = '1';
                cursorText.style.transform = 'translate(-50%, -50%) scale(1)';
            }
        });

        card.addEventListener('mouseleave', () => {
            if (cursorText) {
                cursorText.style.opacity = '0';
                cursorText.style.transform = 'translate(-50%, -50%) scale(0.5)';
            }
        });
    });
</script>
