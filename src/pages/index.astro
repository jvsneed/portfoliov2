---
import Layout from '../layouts/Layout.astro';
import type { MarkdownInstance } from 'astro';

interface Frontmatter {
    title: string;
    date?: string;
    excerpt?: string;
    description?: string;
    tags?: string[];
    featured?: boolean;
    lastModified?: string;
}

interface BlogPost {
    frontmatter: Frontmatter;
    url: string;
}

interface WritingItem extends MarkdownInstance<Frontmatter> {
    url: string;
}

// Add formatDate function
function formatDate(dateStr: string) {
    return new Date(dateStr).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

// Fetch both blog posts and garden notes
const posts = await Astro.glob('./articles/*.md');
const gardenNotes = await Astro.glob('./garden/**/*.md');

// Combine and filter for featured items
const featuredWriting = ([...posts, ...gardenNotes] as WritingItem[])
    .filter(item => item.frontmatter.featured)
    .sort((a, b) => {
        const dateA = new Date(a.frontmatter.lastModified || a.frontmatter.date || '');
        const dateB = new Date(b.frontmatter.lastModified || b.frontmatter.date || '');
        return dateB.getTime() - dateA.getTime();
    })
    .slice(0, 3); // Limit to 3 featured items

const postsArray = Object.values(posts);

// Now TypeScript knows the types
const latestPosts = postsArray
    .sort((a, b) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime())
    .slice(0, 2);

const projects = [
{
        title: "Leading the digital strategy at Pekin Insurance",
        category: "Research Strategy ✦ UX Leadership",
        year: "2024",
        description: "Improving the customer experience across digital touchpoints.",  
        image: "/pekin-thumbnail.png",
        slug: "insurance-research-strategy"  
    },
    {
        title: "Creating the Silver Design System and framework",
        category: "UX Research ✦ Design Systems",
        year: "2024",
        description: "A design system and framework to support senior user needs.",
        image: "/silverdesign-thumbnail.png",
        slug: "silver-design-framework"  
    },
    {
        title: "Improving the Peoria PlayHouse information architecture",
        category: "UX Research ✦ Information Architecture",
        year: "2024",
        description: "Information architecture project to improve the childrens museum's website.",
        image: "/playhouse-thumbnail.png",
        slug: "childrens-museum-information-architecture"  
    },
    {
        title: "Conducting conceptual research for Navigate the Tate",
        category: "Usability Research ✦ UX Design",
        year: "2024",
        description: "A mobile app for museum navigation and gallery intergration for visitors.",
        image: "/tate-thumbnail.png",
        slug: "navigate-the-tate"  
    },

    {
        title: "Improving healthcare access for blind & low vision users on ZocDoc",
        category: "Usability Research ✦ Accessibility Study",
        year: "2024",
        description: "Evaluating the accessibility of ZocDoc with users experiencing blindness and low vision (BLV).",
        image: "/zocdoc-thumbnail.png",
        slug: "zocdoc-accessibility-research"
    },
];
---

<Layout
    title="Johanna Sneed | Senior Researcher"
    description="Senior researcher and inclusive design advocate focusing on accessible digital experiences."
    image="/site-preview.png"
    type="website">
    <div class="editorial-container">
        <main class="content-area" data-section="intro">
            <div class="hero-sequence">
                <div class="name-block">
                    <h1 class="hero-title">
                            <span class="text" style="transform: none; opacity: 1;">johanna sneed</span>
                    </h1>
                    <div class="role-tags" style="opacity: 1;">
                        <span class="role-tag">Senior Researcher</span>
                        <span class="divider"></span>
                        <span class="role-tag">Inclusive Design Advocate</span>
                    </div>
                </div>
            </div>
        </main>

        <div class="interaction-layer">
            <div class="magnetic-area" data-strength="0.2"></div>
            <div class="cursor-follower"></div>
        </div>

        <section class="portfolio-preview" data-section="work">
            <div class="preview-header">
                <h2 class="section-title">Research case studies</h2>
                <div class="nav-controls">
                    <button class="nav-arrow prev" aria-label="Previous projects">←</button>
                    <button class="nav-arrow next" aria-label="Next projects">→</button>
                </div>
            </div>
            
            <div class="projects-container">
                <div class="featured-projects">
                    {projects.map((project, index) => (
                        <a href={`/case-study/${project.slug}`} 
                           class="project-item" 
                           style={`background-image: url(${project.image});`}>
                            <div class="project-content">
                                <div class="project-meta">
                                    <span class="project-category">{project.category}</span>
                                </div>
                                <h3 class="project-title">{project.title}</h3>
                                <p class="project-description">{project.description}</p>
                            </div>
                        </a>
                    ))}
                </div>
            </div>
        </section>

        <section class="writing-section">
            <h2 class="section-title">
               Featured Writing
            </h2>
            <div class="writing-grid">
                {featuredWriting.map((item) => (
                    <a href={item?.url} class="writing-card">
                        <span class="content-type">
                            {item?.url?.includes('/garden/') ? 'Digital garden note' : 'Blog post'}
                        </span>
                        <h3 class="project-title">{item.frontmatter.title}</h3>
                        {/* <p>{item.frontmatter.description}</p> */}
                        <time>
                            {new Date(item.frontmatter.lastModified || item.frontmatter.date || '').toLocaleDateString()}
                        </time>
                    </a>
                ))}
            </div>
        </section>

        <!-- <section class="blog-preview" data-section="blog">
            <div class="preview-header writing">
                <h2 class="section-title">Latest writing</h2>
                <div class="preview-nav">
                    <a href="/writing" class="view-all">All writing →</a>
                </div>
            </div>
            
            <div class="blog-posts">
                {latestPosts.map((post) => (
                    <a href={post.url} class="blog-card">
                        <time class="post-date">{formatDate(post.frontmatter.date)}</time>
                        {/* <div class="post-meta">
                            {post.frontmatter.tags.map((tag: string) => (
                                <span class="post-category">{tag}</span>
                            ))}
                        </div> */}
                        <h3 class="post-title">{post.frontmatter.title}</h3>
                        <p class="post-excerpt">{post.frontmatter.excerpt}</p>
                        <span class="read-more">
                            Read article <span class="arrow">→</span>
                        </span>
                    </a>
                ))}
            </div>
        </section> -->
    </div>
</Layout>

<style>
    main {
        background-color: white;
        max-width: 100%;
        min-width: 100%;
    }

    .content-area {
        padding: 30vh 0rem;
        max-width: var(--max-width);
        margin: 0 auto;
    }

    .hero-sequence {
        position: relative;
        padding: 0 var(--space-xl);
        max-width: 100%;
        display: flex;
    }

    .name-block {
        width: fit-content%;
        justify-content:center;
        margin: 0 auto;
        padding: 0;
    }

    .hero-title {
        font-family: var(--font-special);
        font-weight: 800;
        margin: 0;
        line-height: 0.9;
        width: 100%;
    }

    .hero-title span {
        display: inline-block;
        width: 100%;
        font-size: clamp(2rem, 15vw, 15rem);
        letter-spacing: -0.06em;
        color: var(--color-fg);
        white-space: nowrap;
        text-align:right;
    }

    .hero-title .char {
        display: inline-block;
        transition: all 0.3s var(--ease-out-spring);
        will-change: transform, font-variation-settings;
    }

    .projects-container {
        overflow: hidden;
        position: relative;
        width: 100%;
    }

    .featured-projects {
        display: flex;
        gap: var(--space-sm);
        transition: transform 0.4s var (--ease-out-spring);
        width: 100%;
    }

    .project-item {
        width: 45%; /* Slightly less than 50% to show peek of next item */
        flex: 0 0 auto;
        /* Smoother edges */
        transform: translateZ(0);
        -webkit-transform: translateZ(0);
        -webkit-backface-visibility: hidden;
        -webkit-perspective: 1000;
        backface-visibility: hidden;
        perspective: 1000;
        isolation: isolate; 
        /* ...rest of project-item styles... */
        box-sizing: border-box;
        position: relative;
        padding: var(--space-md) var(--space-md);
        border-radius: var(--curve-sm);
        text-decoration: none;
        color: black;
        overflow: auto;
        background-size: cover;
        background-position: center;
        height: 80vh;
        display: flex;
        transition: transform 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
    }

    @media (max-width: 768px) {
        .featured-projects {
            flex-direction: column;
            gap: var(--space-sm);
            transform: none !important; /* Disable horizontal scrolling on mobile */
        }

        .project-item {
            width: 100%;
            min-width: 100%;
            margin-bottom: var(--space-sm);
        }

        .nav-controls {
            display: none!important; /* Hide navigation on mobile */
        }
    }

    .project-content {
        position: relative;
=        transition: opacity 0.4s var (--ease-out-spring);
        display:flex;
        flex-direction: column;
        justify-content: center;
        background-color: rgba(255,255,255,0.9);
        -webkit-backdrop-filter: blur(20px);
        backdrop-filter: blur(20px);
        height: 30%;
        padding: var(--space-md);   
        border-radius: var(--curve-sm);

    }

    .project-item:hover .project-content {
        opacity: 1;
    }

    .project-category {
        color: var(--color-accent);
        opacity: 0.9;
    }

    .project-description {
        color: black;
        opacity: 0.8;
    }

    .role-tag {
        font-size: 1rem;
    }
    /* .role-tag:not(:last-child)::after {
    content: '/';
    margin-left: .5rem;
}  */
    

    .role-tags {
        margin: var(--space-xs) 0 0 auto;
        width: fit-content;
        display: flex;
        justify-content: flex-end;
        gap: 0.25rem;
        opacity: 1;
    }

    .role-tag {
        font-family: var(--font-special);
        font-size: calc(1.5vw + .5rem);
        font-weight: 400;
        position: relative;
    }
    .divider {
        color: var(--color-accent);
        font-size: 1.5rem;
        line-height: 0;
    }

    .role-tag:not(:last-child)::after {
        content: '✦';
        margin: 0 .10rem 0 .5rem;
        color: var(--color-accent);
    } 

    .portfolio-preview {
        padding: var(--space-xl) var(--space-lg) var(--space-md) var(--space-lg);
        margin: 0 auto;
        max-width: var(--max-width);
    }

    .preview-header {
        display: grid;
        grid-template-columns: 1fr auto;
        align-items: center;
        gap: var(--space-lg);
        margin-bottom: var(--space-md);
    }

    .preview-nav {
        display: flex;
        align-items: center;
        gap: var (--space-md);
    }

    .nav-line {
        width: 60px;
        height: 1px;
        background: var(--color-accent);
    }

    .nav-controls {
        display: flex;
        gap: var(--space-xs);
    }

    .nav-arrow {
        width: 50px;
        height: 50px;
        border: 1px solid var(--color-border);
        background: var(--color-surface);
        border-radius: var (--curve-sm);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s var(--ease-out-spring);
        font-size: 20px;
        font-weight: 900;
    }

    .nav-arrow:hover {
        background: var(--color-accent);
        color: white;
        border-color: var(--color-accent);
        cursor:pointer;
    }

    .nav-arrow:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .project-title{
        padding:0;
        margin: 0;
        line-height:1.2;
        text-wrap:pretty;
    }
    .project-item:hover {
        border-color: 1px solid var(--color-accent);
        transform: translateX(1rem) translateZ(0) rotateX(2deg) rotateY(-2deg);

    }

    .project-meta {
        display: flex;
        align-items: center;
        gap: var (--space-md);
        margin-bottom:var(--space-xs);
    }

    .project-number {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
    }

    .project-category {
        font-family: var(--font-mono);
        font-size: .9rem;
        color: var (--color-accent);
        text-wrap:pretty;
    }

    .post-excerpt,
    .project-description {
        margin-top: .2rem;
        font-size:1rem;
        line-height: 1.2;
        text-wrap:pretty;
    }

    .project-image {
        position: relative;
        overflow: hidden;
        min-height:100%;
        min-width: 40%;
        max-width:40%;
        object-fit: cover;
        display: flex;
    }

    .project-image::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: var(--color-bg);
        opacity: 0.4;
        transition: opacity 0.3s var(--ease-out-spring);
    }

    .project-image img {
        width: 100%;
        height: 250px;
        object-fit: cover;
        transition: all 0.6s var(--ease-out-spring);
        filter: contrast(1.2);
    }

    .project-item:hover .project-image::after {
        opacity: 0;
    }



    .project-link {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: var(--space-md);
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
        text-decoration: none;
        opacity: 0;
        transform: translateX(-10px);
        transition: all 0.3s var(--ease-out-spring);
        
    }



    .project-link .arrow {
        transition: transform 0.3s var(--ease-out-spring);
    }

    .project-link:hover .arrow {
        transform: translateX(6px);
    }
    .view-all {
        font-family: var(--font-mono);
        font-size: 1rem;
        color: var(--color-fg);
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: gap 0.3s var (--ease-out-spring);
        padding: 0 var(--space-sm);
        border-radius: var(--curve-sm) ;
    }

    .view-all:hover {
        background-color: var(--color-accent);
        color: white;

    }

    .blog-preview {
        padding: var(--space-xs) var(--space-lg) var(--space-lg) var(--space-lg);
        margin: 0 auto;
        max-width: var(--max-width);
    }

    .blog-posts {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-sm);

    }

    .blog-card {
        text-decoration: none;  
        color: inherit;  
        padding: var(--space-lg);
        border: 1px solid var(--color-border);
        border-radius: var (--curve-sm);
        transition: all 0.3s var(--ease-out-spring);
        background: rgba(255, 255, 255, 0.8);
        perspective: 1000px;
    }

    .blog-card:hover {
        border-color: var(--color-accent);
        transform: translateX(1rem) translateZ(20px) rotateX(2deg) rotateY(-2deg);
    }

    .post-date {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var (--color-muted);
        display: block;
        margin-bottom: var (--space-sm);
    }

    .post-meta {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-xs);
        margin-bottom: var(--space-sm);
    }

    .post-category {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
    }

    .post-category:not(:last-child)::after {
        content: '✦';
        margin-left: var(--space-xs);
        color: var(--color-accent);
    }

    .post-excerpt {
        margin: 0;
        margin-bottom: var (--space-md);
        font-size:1rem;
    }

    .read-more {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: var(--space-md);
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
        opacity: 0;
        transform: translateX(-10px);
        transition: all 0.3s var(--ease-out-spring);
    }

    .blog-card:hover .read-more {
        opacity: 1;
        transform: translateX(0);
    }

    .read-more .arrow {
        transition: transform 0.3s var(--ease-out-spring);
    }

    .read-more:hover .arrow {
        transform: translateX(6px);
    }

    .content-type {
        font-family: var(--font-mono);
        font-size: 0.75rem;
        color: var(--color-accent);
    }

    .first-name {
        display: inline-block;
    }

    .writing-section {
        padding: var(--space-xs) var(--space-lg) var(--space-lg) var(--space-lg);
        margin: 0 auto;
        max-width: var(--max-width);
    }

    .writing-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: var(--space-sm);
        margin-top: var(--space-md);
    }

    .writing-card {
        box-sizing:border-box;
        text-decoration: none;  
        color: inherit;  
        padding: var(--space-md);
        border: 1px solid var(--color-border);
        border-radius: var (--curve-sm);
        transition: all 0.3s var(--ease-out-spring);
        background: rgba(255, 255, 255, 0.8);
        perspective: 1000px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        gap: calc(var(--space-xs)/2);
    }

    .writing-card:hover {
        border-color: var(--color-accent);
        transform: translateX(1rem) translateZ(20px) rotateX(2deg) rotateY(-2deg);
    }

    .writing-card p {
        color: var(--color-muted);
        margin-bottom: var(--space-md);
        line-height: 1.5;
        flex-grow: 1;
    }

    .writing-card time {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-muted);
    }

    @keyframes mainFloat {
        0% { 
            transform: translateY(0) scale(1);
            opacity: 1;
        }
        50% { 
            transform: translateY(-10px) scale(0.98);
            opacity: 0.9;
        }
        100% { 
            transform: translateY(0) scale(1);
            opacity: 1;
        }
    }

    @keyframes pulseAndFloat {
        0% { transform: translateY(0) scale(1); }
        25% { transform: translateY(-5px) scale(0.98); }
        50% { transform: translateY(0) scale(1.02); }
        75% { transform: translateY(5px) scale(0.98); }
        100% { transform: translateY(0) scale(1); }
    }

    @keyframes titleFloat {
        0% { transform: translateY(0) scale(1); }
        25% { transform: translateY(-8px) scale(0.98); }
        50% { transform: translateY(0) scale(1.02); }
        75% { transform: translateY(8px) scale(0.98); }
        100% { transform: translateY(0) scale(1); }
    }

    @keyframes tagsFloat {
        0% { transform: translateY(0); opacity: 1; }
        25% { transform: translateY(8px); opacity: 0.8; }
        50% { transform: translateY(0); opacity: 1; }
        75% { transform: translateY(-8px); opacity: 0.8; }
        100% { transform: translateY(0); opacity: 1; }
    }

    @media (prefers-reduced-motion: reduce) {
        * {
            animation: none !important;
            transition: none !important;
        }
    }

/* Unified media queries */
@media (max-width: 1024px) {
        .featured-projects {
            gap: var(--space-md);
        }


        .project-content {
            padding: var(--space-md);
        }

        .project-title {
            font-size: 1.25rem;
        }
    }

    @media (max-width: 768px) {
        .preview-header{
            margin-top: var(--space-md);
            margin-bottom: 0;

        }
        .preview-header.writing{
            padding:0;
        }
        
        .content-area {
            width: 100%;
            padding: var(--space-xl) 0;
            display:flex;
            justify-content: center;
            margin-bottom: var(--space-md)
        }

        .hero-sequence {
            padding: 0 var(--space-sm);
        }

        .hero-decoration {
            width: 60%;
        }

        .hero-sequence{
            display:block;
        }


        .blog-card,
        .project-item{
            padding: var(--space-sm) var(--space-md);
        }

        .featured-projects {
            gap: var(--space-xs);
        }


        .featured-projects {
            gap: var(--space-sm);
            margin-bottom: var(--space-lg);
            display:flex;
            flex-direction: column;
            max-width: 100%;
            overflow:hidden;
        }

        .blog-preview.reveal{
            padding: 0 var(--space-sm);
            margin-bottom: var(--space-lg);


        }
        .portfolio-preview{
            padding: var(--space-sm) var(--space-xs); 
        }
        .blog-posts{
            margin-top: var(--space-md);

        }
        .project-content {
            padding: var(--space-sm);
        }

        .project-description {

            display: flex;
            flex-direction:column;
        }
        

        .project-image {
            display: none;
        }
        .project-item{
            width: 100%;
        }
        .writing-section {
            padding: 0 var(--space-sm);
            margin-bottom: var(--space-lg);
        }

        .writing-grid {
            grid-template-columns: 1fr;
        }
    }

    /* Custom breakpoint for extra large screens */
    @media (min-width: 1800px) {
        .hero-title span {
            font-size: clamp(5rem, 16vw, 12rem);
        }
    }

    @media (min-width:786px) and (max-width:1800px) {
        .hero-title span{
            font-size: calc(11vw + .5rem);
            
        }

    }
    @media (min-width:533px) and (max-width:785px) {
        .hero-title span{
            font-size: calc(11vw + .5rem);
        }
        .role-tags{
            display:flex;
            margin: 0 auto;
            max-width: var(--max-width);
            line-height: 1;
            justify-content: flex-end;
            padding: 0;
        }
        .project-item{
        margin: 0 auto;
    }
    }
        @media (max-width:532px) {
            .portfolio-preview{
                padding-top:0;
                padding-bottom:0;
            }
            .name-block,
            .hero-sequence{
                display:flex;
                flex-direction: column;
            justify-content: flex-end;
        }
            .hero-title span{
            font-size: calc(13vw + .5rem);
        }
        .role-tags{
            display:flex;
            margin: 0 auto;
            max-width: var(--max-width);
            line-height: 1;
            justify-content: flex-end;
            padding: 0;
            text-wrap:pretty;

        }
        .role-tag{
            font-size: .8rem;
            text-wrap:pretty;
            margin:0;
            padding: 0;
        }
        .role-tag:not::after {
        margin: 0;
        padding:0;
        } 
        .project-image{
            display: none;
        }
    .project-title{
        padding:0;
        margin-top:0;
    }
  
    .project-item{
        margin: 0 auto!important;
        padding: var(--space-sm);
        max-height: fit-content;
        width: 100%;
        background-image:none!important;
        background-color:var(--color-surface);
    }
    .writing-section{
        padding: 0 var(--space-xs);
    }
    .project-content{
        padding:0;
        height: fit-content;
        width: 100%;
    }
    .writing-grid{
        margin-top:var(--space-sm);
    }
    .writing-card{
        padding:var(--space-sm);    
    }
        
</style>

<script>
    import gsap from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    import SplitType from 'split-type';
    
    gsap.registerPlugin(ScrollTrigger);

    // Add scroll progress indicator
    window.addEventListener('scroll', () => {
        const scrollPercent = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
        const progressBar = document.querySelector('.scroll-progress') as HTMLElement;
        progressBar?.style.setProperty('--scroll', `${scrollPercent}%`);
    });

    // Initialize title animation after DOM content is loaded
    document.addEventListener('DOMContentLoaded', () => {
        // First split the text
        const titleText = new SplitType('.hero-title .text', {
            types: 'chars',
            tagName: 'span'
        });

        // Then set up the mouse handlers
        const heroTitle = document.querySelector('.hero-sequence') as HTMLElement;
        const chars = document.querySelectorAll('.hero-title .char');

        if (heroTitle && chars.length > 0) {
            // Mouse move handler
            heroTitle.addEventListener('mousemove', (e: MouseEvent) => {
                const rect = heroTitle.getBoundingClientRect();
                const mouseX = e.clientX - rect.left;
                const mouseY = e.clientY - rect.top;
                
                chars.forEach((char) => {
                    const charRect = char.getBoundingClientRect();
                    const charX = charRect.left - rect.left + charRect.width / 2;
                    const charY = charRect.top - rect.top + charRect.height / 2;
                    
                    const distance = Math.hypot(mouseX - charX, mouseY - charY);
                    const maxDistance = 300;
                    const influence = Math.max(0, 1 - distance / maxDistance);
                    
                    const scale = 1 + influence * 0.3;
                    const weight = 400 + influence * 400;
                    
                    (char as HTMLElement).style.transform = `scale(${scale})`;
                    (char as HTMLElement).style.fontWeight = weight.toString();
                });
            });

            // Add mouseleave handler to reset the text
            heroTitle.addEventListener('mouseleave', () => {
                chars.forEach((char) => {
                    (char as HTMLElement).style.transform = 'scale(1)';
                    (char as HTMLElement).style.fontWeight = '400';
                });
            });
        }
    });

    // Projects Navigation
    const projectsContainer = document.querySelector('.featured-projects') as HTMLElement;
    const prevBtn = document.querySelector('.nav-arrow.prev') as HTMLButtonElement;
    const nextBtn = document.querySelector('.nav-arrow.next') as HTMLButtonElement;
    let currentIndex = 0;

    function updateNavigation() {
        if (window.innerWidth <= 768) {
            // Disable navigation on mobile
            projectsContainer.style.transform = '';
            return;
        }

        const projectItem = projectsContainer.querySelector('.project-item') as HTMLElement;
        const itemWidth = projectItem?.offsetWidth || 0;
        const containerWidth = projectsContainer.parentElement?.offsetWidth || 0;
        const maxIndex = Math.max(0, projectsContainer.children.length - Math.floor(containerWidth / itemWidth));
        
        if (prevBtn) prevBtn.disabled = currentIndex <= 0;
        if (nextBtn) nextBtn.disabled = currentIndex >= maxIndex;
        
        projectsContainer.style.transform = `translateX(${-currentIndex * (itemWidth + 8)}px)`;
    }

    prevBtn?.addEventListener('click', () => {
        currentIndex = Math.max(0, currentIndex - 1);
        updateNavigation();
    });

    nextBtn?.addEventListener('click', () => {
        const maxIndex = projectsContainer.children.length - 2;
        currentIndex = Math.min(maxIndex, currentIndex + 1);
        updateNavigation();
    });

    // Initialize navigation state
    updateNavigation();

    // Update on resize
    window.addEventListener('resize', updateNavigation);
</script>
