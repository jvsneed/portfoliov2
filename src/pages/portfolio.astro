---
import Layout from '../layouts/Layout.astro';

interface Frontmatter {
    title: string;
    category: string;
    description: string;
    heroImage: string;
}

interface CaseStudy {
    frontmatter: Frontmatter;
    url: string;
}

const caseStudies = await import.meta.glob<CaseStudy>('./case-study/*.md', { eager: true });
const allCaseStudies = Object.values(caseStudies);
---

<Layout>
    <div class="page-container">
        <section class="portfolio-preview" data-section="work">
            <div class="header-content">
                <h1 class="section-title">Research Portfolio</h1>
                <div class="preview-nav">
                </div>
            </div>
            
            <div class="featured-projects">
                {allCaseStudies.map((study, index) => (
                    <a href={study.url} class="project-item" data-index={index}>
                        <div class="project-content">
                            <div class="project-meta">
                                <span class="project-category">{study.frontmatter.category}</span>
                            </div>
                            <h3 class="project-title">{study.frontmatter.title}</h3>
                            <p class="project-description">{study.frontmatter.description}</p>
                            <span class="project-link">
                                <span>Go to case study</span>
                                <span class="arrow">â†’</span>
                            </span>
                        </div>
                        <div class="project-image">
                            <img src={study.frontmatter.heroImage} alt={study.frontmatter.title} />
                        </div>
                    </a>
                ))}
            </div>
        </section>
    </div>
    <div class="cursor-text"></div>
</Layout>

<style>
    .portfolio-preview {
        margin: 0 auto;
        max-width: var(--max-width);
    }

    .preview-header {
        display: grid;
        grid-template-columns: 1fr auto;
        align-items: center;
        gap: var(--space-lg);
        margin-bottom: var(--space-xl);
        padding-bottom: var(--space-lg);
        border-bottom: 1px solid var(--color-border);
    }



    .nav-line {
        width: 60px;
        height: 1px;
        background: var(--color-accent);
    }

    .featured-projects {
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
        padding: var(--space-lg) 0;
    }

    .project-item {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 4rem;
        align-items: center;
        padding: var(--space-md) var(--space-lg);
        border: 1px solid var(--color-border);
        background: rgba(255, 255, 255, 0.8);
        border-radius: var(--curve-sm);
        transition: all 0.4s var(--ease-out-spring),
        border-color 0.3s ease;
        cursor: none;
        text-decoration: none;
        color: inherit;
        margin:0;
    }

    .project-item:hover {
        border-color: var(--color-accent);
        transform: translateX(var(--space-sm)) translateZ(20px) rotateX(2deg) rotateY(-2deg);
    }

    .project-content,
    .project-image {
        position: relative;
        z-index: 1;
    }

    .project-meta {
        display: flex;
        align-items: center;
        gap: var(--space-md);
        margin-bottom: 0;
    }

    .project-category {
        font-family: var(--font-mono);
        font-size: .9rem;
        color: var(--color-accent);
    }



    .project-description {
        color: var(--color-muted);
        margin: 0;
        max-width: 40ch;
    }

    .project-link {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: var(--space-md);
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
        text-decoration: none;
        opacity: 0;
        transform: translateX(-10px);
        transition: all 0.3s var(--ease-out-spring);
    }

    .project-item:hover .project-link {
        opacity: 1;
        transform: translateX(0);
    }

    .project-link .arrow {
        transition: transform 0.3s var(--ease-out-spring);
    }

    .project-link:hover .arrow {
        transform: translateX(6px);
    }

    .project-image {
        overflow: hidden;
    }

    .project-image img {
        width: 100%;
        max-height: 20rem;
        object-fit: cover;
        transition: transform 0.6s var(--ease-out-spring);
        border-radius: var(--curve-sm);

    }

    .project-item:hover .project-image img {
        transform: scale(1.05);
    }

    @media (max-width: 768px) {

        .project-content {
            order: 2;
        }

        .project-image {
            order: 0;
            max-height: 200px;
        }
        .project-item{
            padding: var(--space-sm) var(--space-md);
        }
    }

    /* Add cursor text styles */
    @media (hover: hover) and (pointer: fine) {
        .project-item {
            cursor: none;
        }
        
        .cursor-text {
            position: fixed;
            pointer-events: none;
            width: 120px;
            height: 120px;
            background: var(--color-accent);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: var(--font-mono);
            font-size: 0.875rem;
            text-align: center;
            padding: 1.5rem;
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.5);
            transition: opacity 0.3s, transform 0.3s var(--ease-out-spring);
            z-index: 1000;
        }
    }

    @media (hover: none) or (pointer: coarse) {
        .cursor-text {
            display: none;
        }

        .project-item {
            cursor: pointer;
        }
    }
</style>

<script>
    // Only initialize cursor effects if device supports hover
    if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
        // Add cursor effect for project cards
        const projectCards = document.querySelectorAll('.project-item');
        const cursorText = document.querySelector('.cursor-text') as HTMLDivElement;

        document.addEventListener('mousemove', (e) => {
            if (cursorText) {
                cursorText.style.left = e.clientX + 'px';
                cursorText.style.top = e.clientY + 'px';
            }
        });

        projectCards.forEach(card => {
            card.addEventListener('mouseenter', () => {
                if (cursorText) {
                    cursorText.textContent = 'Go to case study';
                    cursorText.style.opacity = '1';
                    cursorText.style.transform = 'translate(-50%, -50%) scale(1)';
                }
            });

            card.addEventListener('mouseleave', () => {
                if (cursorText) {
                    cursorText.style.opacity = '0';
                    cursorText.style.transform = 'translate(-50%, -50%) scale(0.5)';
                }
            });
        });
    }
</script>
