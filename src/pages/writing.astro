---
import Layout from '../layouts/Layout.astro';

interface Frontmatter {
    title: string;
    date: string;
    excerpt: string;
    tags: string[];
}

interface Post {
    frontmatter: Frontmatter;
    url: string;
}

// Helper function for date formatting
function formatDate(dateStr: string) {
    return new Date(dateStr).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

const posts = await import.meta.glob<Post>('./articles/*.md', { eager: true });
const postsArray = Object.values(posts);

// Convert all tags to lowercase and count occurrences
const tagCounts = postsArray.reduce((acc, post) => {
    post.frontmatter.tags?.forEach(tag => {
        const lowerTag = tag.toLowerCase();
        acc[lowerTag] = (acc[lowerTag] || 0) + 1;
    });
    return acc;
}, {} as Record<string, number>);

const allTags = Object.keys(tagCounts).sort();

const sortedPosts = postsArray.map(post => ({
    ...post,
    frontmatter: {
        ...post.frontmatter,
        tags: post.frontmatter.tags.map(tag => tag.toLowerCase())
    }
})).sort((a, b) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime());

---

<Layout>
    <div class="page-container">
        <header class="portfolio-header">
            <div class="header-content">
                <h1 class="section-title">Writing</h1>
                <div class="filter-section">
                    <h2>Filter by tag</h2>
                    <div class="category-tags" id="category-filters">
                        <button class="tag active" data-category="all">
                            All
                            <span class="count">{postsArray.length}</span>
                        </button>
                        {allTags.map(tag => (
                            <button class="tag" data-category={tag}>
                                {tag}
                                <span class="count">{tagCounts[tag]}</span>
                            </button>
                        ))}
                    </div>
                </div>
            </div>
        </header>

        <div class="posts-grid">
            {sortedPosts.map((post) => (
                <a href={post.url} 
                   class="post-card"
                   data-categories={post.frontmatter.tags?.map(t => t.toLowerCase().replace(/\s+/g, '-')).join(' ')}>
                    <time class="post-date">{formatDate(post.frontmatter.date)}</time>
                    <h2 class="post-title">{post.frontmatter.title}</h2>
                    <p class="post-excerpt">{post.frontmatter.excerpt}</p>
                    {/* <div class="post-meta">
                        {post.frontmatter.tags?.map((tag: string) => (
                            <span class="post-category">{tag}</span>
                        ))}
                    </div> */}
                    <span class="read-more">
                        Read article <span class="arrow">→</span>
                    </span>
                </a>
            ))}
        </div>
    </div>
    <div class="cursor-text"></div>
</Layout>

<style>

    @media screen and (max-width: 768px) {
        .blog-container {
            padding: var(--space-sm);
        }

        
    }

    .category-tags {
        display: flex;
        gap: var(--space-sm);
        padding-bottom: 0.5rem;
        flex-wrap:wrap;
    }

    .tag {
        font-family: var(--font-mono);
        font-size: 1rem;
        color: var(--color-muted);
        padding: 0.5rem 1rem;
        border-radius: 2px;
        cursor: pointer;
        transition: all 0.3s var(--ease-out-spring);
        border: 1px solid var(--color-border);
        background: var(--color-surface);
    }

    .tag:hover {
        background: var(--color-accent);
        color: white;
        border-color: var(--color-accent);
    }

    .tag.active {
        background: var(--color-accent);
        color: white;
        border-color: var(--color-accent);
    }

    .posts-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-sm);
        max-width: var(--max-width);
        margin: 0 auto;
        padding: var(--space-md) 0;
    }

    .post-card {
        display: block;
        text-decoration: none;
        color: inherit;
        padding: var(--space-lg);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
        background: rgba(255, 255, 255, 0.8);
        transition: all 0.3s var(--ease-out-spring);
        cursor: none;
        transform-style: preserve-3d;
        perspective: 1000px;
    }

    .post-card:hover {
        border-color: var(--color-accent);
        transform: translateX(1rem) translateZ(20px) rotateX(2deg) rotateY(-2deg);
    }

    .post-meta {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-xs);
        margin-bottom: var(--space-sm);
    }

    .post-category {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
    }

    .post-category:not(:last-child)::after {
        content: '✦';
        margin-left: var(--space-xs);
        color: var (--color-accent);
    }

    .post-date {
        font-family: var (--font-mono);
        font-size: 0.875rem;
        color: var(--color-muted);
        margin-bottom: var (--space-xs);
    }


    .post-excerpt {
        margin: 0;
        font-size: 1rem;
        line-height: 1.5;
        color: var(--color-muted)
        margin-bottom: var (--space-md);
    }

    .read-more {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: var(--space-md);
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
        opacity: 0;
        transform: translateX(-10px);
        transition: all 0.3s var (--ease-out-spring);
    }

    .post-card:hover .read-more {
        opacity: 1;
        transform: translateX(0);
    }

    .read-more .arrow {
        transition: transform 0.3s var(--ease-out-spring);
    }

    .read-more:hover .arrow {
        transform: translateX(6px);
    }

    .read-more:hover {
        color: var(--color-fg);
    }
    .filter-section{
        margin-top: var(--space-md);
        margin-bottom: 0;
        padding: 0;
    }

    .filter-section h2 {
        font-size: 0.875rem;
        font-family: var(--font-mono);
        color: var(--color-muted);
        margin-bottom: var(--space-sm);
    }

    @media (max-width: 768px) {
        .blog-container {
            padding-top: 6rem;
        }

        .category-tags {
            width: 100%;
            overflow-x: auto;
            padding-bottom: var(--space-sm);
            white-space: nowrap;
            -webkit-overflow-scrolling: touch;
        }

        .posts-grid {
            grid-template-columns: 1fr;
        }

        .post-card {
            padding: var(--space-md);
            margin: 0;
            border-radius: var(--curve-sm);
            border-left: 1px solid var(--color-border);
            border-right: 1px solid var(--color-border);
        }
    }

    /* Add cursor text styles */
    .cursor-text {
        position: fixed;
        pointer-events: none;
        width: 120px;
        height: 120px;
        background: var(--color-accent);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: var(--font-mono);
        font-size: 0.875rem;
        text-align: center;
        padding: 1.5rem;
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.5);
        transition: opacity 0.3s, transform 0.3s var(--ease-out-spring);
        z-index: 1000;
    }

    @media (hover: hover) and (pointer: fine) {
        .post-card {
            cursor: none;
        }
        
        .cursor-text {
            /* existing cursor-text styles */
        }
    }

    @media (hover: none) or (pointer: coarse) {
        .cursor-text {
            display: none;
        }

        .post-card {
            cursor: pointer;
        }
    }

    .tag {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
    }

    .count {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 1.5rem;
        height: 1.5rem;
        padding: 0 0.5rem;
        border-radius: 12px;
        background: var(--color-border);
        color: var(--color-muted);
        font-size: 0.75rem;
        transition: all 0.3s var(--ease-out-spring);
    }

    .tag:hover .count,
    .tag.active .count {
        background: rgba(255, 255, 255, 0.2);
        color: white;
    }
</style>

<script>
    interface PostElement extends HTMLElement {
        style: CSSStyleDeclaration;
    }

    const filterButtons = document.querySelectorAll<HTMLButtonElement>('.tag');
    const postCards = document.querySelectorAll<PostElement>('.post-card');
    const cursorText = document.querySelector<HTMLDivElement>('.cursor-text');

    function filterPosts(category: string) {
        const normalizedCategory = category.toLowerCase().replace(/\s+/g, '-');
        
        // Update button states
        filterButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.category === category) {
                btn.classList.add('active');
            }
        });

        // Filter posts
        postCards.forEach(card => {
            const categories = card.dataset.categories?.split(' ') || [];
            card.style.display = (category === 'all' || categories.includes(normalizedCategory)) 
                ? '' 
                : 'none';
        });
    }

    // Set up event listeners
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            const category = button.dataset.category || 'all';
            filterPosts(category);
        });
    });

    // Handle tag selection from session storage
    document.addEventListener('DOMContentLoaded', () => {
        const selectedTag = sessionStorage.getItem('selectedTag');
        if (selectedTag) {
            filterPosts(selectedTag);
            sessionStorage.removeItem('selectedTag');
        }
    });

    // Handle cursor effects
    if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
        if (cursorText) {
            document.addEventListener('mousemove', (e) => {
                cursorText.style.left = `${e.clientX}px`;
                cursorText.style.top = `${e.clientY}px`;
            });

            postCards.forEach(post => {
                post.addEventListener('mouseenter', () => {
                    cursorText.textContent = 'Read article';
                    cursorText.style.opacity = '1';
                    cursorText.style.transform = 'translate(-50%, -50%) scale(1)';
                });

                post.addEventListener('mouseleave', () => {
                    cursorText.style.opacity = '0';
                    cursorText.style.transform = 'translate(-50%, -50%) scale(0.5)';
                });
            });
        }
    }
</script>