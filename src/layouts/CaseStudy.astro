---
import Layout from './Layout.astro';
import GardenBadge from '../components/GardenBadge.astro';
const { frontmatter } = Astro.props;
const { title, role, timeline, team, tools, heroImage, overview, color = 'var(--color-accent)' } = frontmatter;

// Prepare metadata for social sharing
const description = overview || `${title} - A case study by Johanna Sneed`;
const socialImage = heroImage || '/site-preview.png';
---

<Layout
    title={title}
    description={description}
    image={socialImage}
    type="article">
    <article class="case-study">
        <div class="hero">
            <div class="hero-content">
                <h1>{title}</h1>
                <p class="overview">{overview}</p>
            </div>
            
            <div class="meta-grid">
                <div class="meta-item">
                    <span class="meta-label">Role</span>
                    <span class="meta-value">{role}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Timeline</span>
                    <span class="meta-value">{timeline}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Team</span>
                    <span class="meta-value">{team}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Tools</span>
                    <span class="meta-value">{tools.join(', ')}</span>
                </div>
            </div>
        </div>

        {heroImage && <div class="hero-image">
            <img src={heroImage} alt="" />
        </div>}

        <div class="case-content">
         <slot />
        </div>
    </article>
    <GardenBadge />

</Layout>

<style>
    .case-study {
        width: 100%;
    }

    .hero {
        padding: var(--space-xl) 0;
        background: var(--color-surface);
        /* border-bottom: 1px solid var(--color-border); */
        
    }

    .hero-content {
        max-width: var(--max-width);
        margin: 0 auto;

    }

    .hero h1 {
        font-size: clamp(2.5rem, 5vw, 4rem);
        line-height: 1.1;
        margin-bottom: var(--space-sm);
        padding-top: var(--space-xl);

    }

    .overview {
        font-size: 1.25rem;
        color: var(--color-muted);
        max-width: 65ch;
        margin-bottom: var(--space-lg);
        line-height: 1.6;
    }

    .meta-grid {
        max-width: var(--max-width);
        margin: 0 auto;
        padding: 0 var(--space-lg);
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: var(--space-lg);
        padding-bottom: var(--space-md);

    }

    .meta-item {
        display: flex;
        flex-direction: column;
        gap: var(--space-xs);
    }

    .meta-label {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--color-accent);
    }

    .meta-value {
        font-size: 1rem;
        color: var(--color-muted);
    }

    .hero-image {
        width: 100%;
        max-height: 60vh;
        /* margin-top: var(--space-xl); */
        background: var(--color-surface);
        overflow: hidden;
    }

    .hero-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .case-content {
        max-width: var(--max-width);
        margin: 0 auto;
        padding: var(--space-xl) var(--space-lg);
    }

    .case-content :global(section) {
        margin: var(--space-sm) 0;
        padding: var(--space-xl);
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--curve-sm);
    }

    .case-content :global(h2) {
        font-size: 2.5rem;
        font-weight: 600;
    }
    .case-content :global(h3) {
        margin-top: var(--space-lg);
        font-size: 2rem;
        font-weight: 400;
    }

    .case-content :global(h4) {
        margin-top: var(--space-sm);
        font-size: 1.5rem;
        font-weight: 400;
    }
    .case-content :global(h5) {
        margin-top: var(--space-lg);
        font-size: 1rem;
        font-weight: 600;
    }
    .case-content :global(ul) {
        padding-left: 1.5rem;
    }
    .case-content :global(li) {
        font-size: 1rem;
1    }

    .case-content :global(img) {
        width: 100%;
        height: auto;
        border-radius: var(--curve-sm);
        margin: var(--space-lg) 0;
    }

    .case-content :global(blockquote) {
        margin: 1rem 0;
        padding: 0 2rem;
        border-left: 4px solid var(--color-accent);
        background: var(--color-surface);
        border-radius: 0 var(--curve-sm) var(--curve-sm) 0;
        font-style:italic;
        font-size: 1.25rem;
    }
    .case-content :global(.note) {
        margin: 2rem 0;
        padding: 1.5rem 2rem;
        /* background: rgba(255, 236, 179, 0.15); */
        border: 1px solid rgba(242, 212, 121, 0.919);
        border-radius: var(--curve-sm);
        font-size: 0.9375rem;
        color: var(--color-muted);
        line-height: 1.6;
    }

    .case-content :global(.note p) {
        margin: 0;
        font-size: inherit;
        line-height: inherit;
        opacity: 1;
    }
    @media (max-width: 1400px) {
        .hero {
            padding: var(--space-md) var(--space-xl);
        }
        .meta-grid{
            padding:0 0 var(--space-md) 0;
        }
    }



    @media (max-width: 768px) {
        .meta-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: var(--space-md);
            padding: 0 var(--space-xs);
        }

        .hero-content{
            padding: var(--space-md) var(--space-xs);


        }

        .hero{
            padding: var(--space-md) 0;
        }

        .hero h1{
            padding: 0;
        }

        .overview{
            margin-bottom: 0;
        }


        .hero-image {
            height: 40vh;
        }

        .case-content :global(section) {
            padding: var(--space-xs);
        }
        .case-content{
            padding:0;
        }
    }
</style>

<script>
    // Update progress bar based on scroll position
    window.addEventListener('scroll', () => {
        const totalHeight = document.documentElement.scrollHeight - window.innerHeight;
        const progress = (window.scrollY / totalHeight) * 100;
        
        const progressBar = document.querySelector('.progress-bar') as HTMLElement;
        if (progressBar) {
            progressBar.style.transform = `scaleX(${progress / 100})`;
        }
    });

    // Highlight current section in nav
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.case-nav a');

    window.addEventListener('scroll', () => {
        const scrollPos = window.scrollY + 100; // Offset for nav height

        sections.forEach(section => {
            if (!section.id) return;
            
            const sectionTop = (section as HTMLElement).offsetTop;
            const sectionHeight = (section as HTMLElement).offsetHeight;

            if (scrollPos >= sectionTop && scrollPos < sectionTop + sectionHeight) {
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href') === `#${section.id}`) {
                        link.classList.add('active');
                    }
                });
            }
        });
    });

    // Add horizontal scroll snapping for nav on touch devices
    const nav = document.querySelector('.case-nav') as HTMLElement;
    if (nav && 'scrollBehavior' in document.documentElement.style) {
        // nav.style.scrollBehavior = 'smooth';
        nav.style.scrollSnapType = 'x proximity';
        
        const links = nav.querySelectorAll('a');
        links.forEach(link => {
            link.style.scrollSnapAlign = 'center';
        });
    }
</script>
